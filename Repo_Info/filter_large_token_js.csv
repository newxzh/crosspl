File_path,Classfier,Classfier_ID,Interface_class,Interface_name,Status_description
D:\CAE\Splited_Repository\1\ace_1028340\static.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\axum_372172254\examples\chat\chat.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\bagisto_148129143\public\build\assets\app-f9f1eaaf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bootswatch_3374332\docs\2\bower_components\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\aliyunpan_360366759\src\renderer\aliapi\uploaddisk.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\blessed_7855340\example\ansi-viewer\index.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\apachecn-algo-zh_105229748\asset\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\BrowserQuest_2491285\client\js\gameclient.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\BrowserQuest_2491285\client\js\lib\css3-mediaqueries.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bundlephobia_86363993\server\api\BuildService.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\bundlephobia_86363993\utils\cache.utils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\bundlephobia_86363993\utils\firebase.utils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\bundlephobia_86363993\utils\rebuild.utils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\services\cvm\corretoras.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\banks-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cep-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cep-v2.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cnpj-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\corretoras-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\ddd-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\feriados-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\fipe-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\ibge-municipios-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\ibge-uf-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\isbn-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\ncm-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\registrobr.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\taxas-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cpetc\cidade-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cpetc\ondas-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\BrasilAPI_237140949\tests\cpetc\previsao-v1.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\buster_158064011\src\background\main.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\Blog_137582912\websocket\iframe流.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Blog_137582912\websocket\websocket.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\Blog_137582912\websocket\websocket.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\1\Blog_137582912\websocket\轮询.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Blog_137582912\websocket\长轮询.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Blog_137582912\多种跨域方式\2.cors\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Blog_137582912\多种跨域方式\2.cors\server2.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Blog_137582912\多种跨域方式\7.websocket\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\1\Blog_137582912\多种跨域方式\7.websocket\socket.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\lib\requestHandler.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\lib\util.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\lib\webInterface.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\lib\wsServer.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\test\basic.spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\test\util.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\anyproxy_22832533\web\src\common\wsUtil.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\beautiful-web-type_3159966\js\opentype.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\ActionBarSherlock_1451060\website\static\css3-mediaqueries.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\30-days-of-react-native_53172292\view\public\js\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\baiduwp-php_286645686\public\static\functions.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\adminer_627735\adminer\static\functions.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\aliyunpan_605449620\src\aliapi\uploaddisk.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AutoPiano_178815516\static\js\livere.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\agentscope_742244656\src\agentscope\studio\static\js_third_party\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\algodeck_237596051\site\assets\javascripts\bundle.8fd75fb4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\beautiful-jekyll_31560300\assets\js\staticman.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\breach_core_12977854\lib\module_manager.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\android-advancedrecyclerview_29782400\doclava\template\assets\jquery-resizable.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\arxiv-sanity-preserver_47010479\static\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\accounting.js_2242214\tests\qunit\vendor\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\braft-editor_99996585\playground\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\duplexify\test.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\engine.io\lib\server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\engine.io-client\engine.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\engine.io-client\lib\transports\polling-xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\engine.io-client\lib\transports\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\less\dist\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\less\test\browser\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\pullstream\test\pullStreamTest.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\sntp\test\index.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\socket.io-client\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\AhMyth-Android-RAT_96493616\AhMyth-Server\app\node_modules\ws\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\betwixt_46131737\src\dt\sdk\InspectorBackend.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\bundlesize_95533278\src\api.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\angular-translate_9076111\build_tools\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bottender_107108009\examples\custom-server-express\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bottender_107108009\examples\line-liff-v1\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bottender_107108009\examples\line-liff-v2\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bottender_107108009\examples\line-notify\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bottender_107108009\examples\telegram-game\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\AlgoWiki_27222050\javascripts\respond.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\aimeos_103015070\public\build\assets\app-211a03ca.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bilibili-helper_75825778\packages\unblock-area-limit\src\api\biliplus.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\adminMongo_49763476\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bee-queue_29453461\examples\express\web.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Boop_167766835\Boop\Boop\scripts\lib\papaparse.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\jsdom\lib\jsdom\browser\resource-loader.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\jsdom\lib\jsdom\living\xhr-utils.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\localforage\docs\localforage.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\localforage\test\test.datatypes.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\nedb\browser-version\out\nedb.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\random-fake-useragent\create-data.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\antSword_53655574\node_modules\superagent\dist\superagent.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\arachni_861781\components\reporters\html\default\js\lib\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\2-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\3-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\3-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\4-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\4-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\5-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\5-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\6-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\6-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\7-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\7-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\8-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\8-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\9-begin\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\9-end\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\book\9-end-functional\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\builderbook_112898455\builderbook\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Authenticator_121876351\src\models\backup.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Awesome-JavaScript-Interviews_127305987\Promise-Async-Await-Sequential-Execution\async-await-master-notes\setTimeout-rate-limiting-api-calls-IMP-with-async-await-looping-over-apis-2.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\blockbench_93747383\lib\FileSaver.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\blockbench_93747383\lib\peer.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\blockbench_93747383\lib\targa.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\asymmetric.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\basics.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\on_any.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\pass_through.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\pass_through_on_no_match.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\promise.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\reply_once.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\axios-mock-adapter_54378064\test\throw_exception_on_no_match.spec.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\awesome-blockchain_127364556\src\basic_chain\js\network.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\bootstrap-treeview_15324383\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bongo.cat_153696242\js\lowLag.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AdguardBrowserExtension_32012345\tests\helpers\mocks\fetch.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\anu_83402280\dist\ReactH5.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\AI-Writer_389786846\docs\eng\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AI-Writer_389786846\web-client\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\brick_10466461\dist\platform\platform.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bjorn_809326864\web\scripts\config.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\dnode\index.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\dnode\example\auth\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\dnode\example\shoe\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\faye-websocket\examples\autobahn_client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\faye-websocket\examples\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\faye-websocket\examples\server.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\faye-websocket\spec\runner.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\phantom\phantom.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\shoe\example\dnode\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\shoe\example\invert\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\shoe\node_modules\sockjs-client\sockjs.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\shoe\node_modules\sockjs-client\lib\dom2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\shoe\test\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\sntp\test\index.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\1\android_interview_98419904\node_modules\sockjs\lib\trans-websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\bootstrap-social_11054453\assets\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Blog_176851618\Security\XSS\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\asm-dom_83154886\benchmarks\compiled\wasm\app.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\asm-dom_83154886\website\static\examples\todomvc\0.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bootstrap-Admin-Template_8203555\public\assets\lib\plupload\js\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bootstrap-Admin-Template_8203555\public\assets\lib\plupload\js\plupload.full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bootstrap-Admin-Template_8203555\src\lib\plupload\js\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bootstrap-Admin-Template_8203555\src\lib\plupload\js\plupload.full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\3d_442942525\public\libs\basis\basis_transcoder.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\asciinema-player_18031150\src\driver\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\bootstrap_2782458\docs\assets\js\vendor\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bleach_525316\tests_website\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\abricotine_46560339\app\files.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\1\build-your-own-mint_164251040\scripts\plaidServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\angular-schema-form_18065797\dist\angular-schema-form.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\API_245077032\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\API_245077032\updateCheck.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\appleMobilityData.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\getStates.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\getTherapeutics.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\getVaccine.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\getVariants.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\getWorldometers.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\jhuLocations.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\nytData.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getAustria.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getCanada.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getColombia.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getGermany.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getIsrael.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getItaly.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getNewZealand.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getNigeria.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getSouthAfrica.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getSwitzerland.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\covid-19\govScrapers\getUK.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\API_245077032\scrapers\influenza\getCDC.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\bull-board_203997653\examples\with-express\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bull-board_203997653\examples\with-express-auth\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bull-board_203997653\examples\with-express-csrf\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bull-board_203997653\examples\with-multiple-instances\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\arduino-ide_337042139\arduino-ide-extension\src\browser\monitor-manager-proxy-client-impl.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\arduino-ide_337042139\arduino-ide-extension\src\node\web-socket\web-socket-provider-impl.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\ApiManager_54940741\api\src\main\webapp\resources\framework\wang-editor-3.1.1\wangEditor.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bliss_40975535\bliss.shy.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bliss_40975535\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AriaNg-Native_86213415\main\lib\http.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\AriaNg-Native_86213415\main\lib\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\awesome-interview_399139980\assets\js\5178.6dd866d0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\backbonetutorials_1549501\examples\cross-domain\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\backbonetutorials_1549501\_site\examples\cross-domain\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\aws-mobile-react-native-starter_99263715\backend\lambdas\crud\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\binaryjs_4829739\examples\fileupload\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\binaryjs_4829739\examples\imageshare\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\bootmetro_4455122\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\budo_30808587\lib\reload\server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\1\Blue-topaz-example_443304901\.obsidian\plugins\obsidian-export-image\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AutoLoadCache_31406270\autoload-cache-spring-boot-starter\src\main\resources\META-INF\resources\webjars\autoload-cache-ui\js\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AndroidControl_88256245\resources\web\static\js\device.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\AndroidControl_88256245\resources\web\static\js\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\abcjs_15205201\src\synth\load-note.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\ali-oss_18427025\example\server\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\ali-oss_18427025\example\server\postObject.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\ali-oss_18427025\test\node\object.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\angular-oauth2-oidc_77933597\docs\js\libs\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\angular-oauth2-oidc_77933597\docs\js\libs\promise.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\broadcast-channel_135900664\dist\es5node\methods\node.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\broadcast-channel_135900664\dist\lib\methods\node.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\bpmn-js-examples_20054543\properties-panel-async-extension\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\bootstrap-application-wizard_8061175\demo\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Awesome-JavaScript-Projects_318195003\assets\js\joke-teller-js\joke-voiceRSS.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Adalanche_301996631\modules\frontend\html\custom.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\apps_128733562\packages\apps-config\src\ci\chainEndpoints.spec.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\BroadleafCommerce_2948949\admin\broadleaf-open-admin-platform\src\main\resources\open_admin_style\js\admin\lib\redactor.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\browserless_102619418\packages\screencast\examples\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\Bootstrap-Admin-Theme_7997016\vendors\jquery-validation\demo\tinymce\tiny_mce.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\angularjs-book_8108230\chapter2\talkingToServers\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\angularjs-book_8108230\chapter2\talkingToServers\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-fixtures.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\angularjs-book_8108230\chapter2\talkingToServers\node_modules\express\node_modules\connect\node_modules\formidable\tool\record.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\angularjs-book_8108230\chapter4\guthub\web-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\angular-client-side-auth_7116973\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\blog_94613553\src\main\resources\static\admin\plugins\md\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Beaver_153948655\web\static\js\beaver.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\alloy-ui_1925483\demos\surface\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\amis-admin_184237919\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\BlueLotus_XSSReceiver_44088646\template\phpcms v9 getshell.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\BlueLotus_XSSReceiver_44088646\template\qibocms.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\AlpacaDataCleaned_617068219\gui\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\ByWebView_73827854\app\src\main\assets\callsms_files\nr-998.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\C1000K-Servers_36058160\nodejs\node_modules\nodejs-websocket\Server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\C1000K-Servers_36058160\nodejs\node_modules\nodejs-websocket\samples\chat\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\aimeos-headless_432180204\public\build\assets\app-06d2b2d4.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\angular-express-seed_4708468\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\axon_4999876\lib\sockets\sock.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\1\angular-busy_9656661\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\blanket_6192590\testserver.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\batavia_40421806\tests\js_harness.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\Antmove_197347437\packages\@amove\wx\src\utils\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\Antmove_197347437\packages\@antmove\utils\src\reprotError.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\1\bludit_31856692\bl-plugins\tinymce\tinymce\plugins\imagetools\plugin.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\be-mean_41759865\Apostila\module-nodejs\src\aula-express\app-res-links.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\be-mean_41759865\Apostila\module-nodejs\src\aula-express\app-res-render-html.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\be-mean_41759865\Apostila\module-nodejs\src\aula-express\app-res-render-module-users.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\be-mean_41759865\Apostila\module-nodejs\src\aula-express\app-res-render-module.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\awesome-face_114070899\site\assets\javascripts\application.245445c6.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\application-shell_43752413\server\controllers\server-controller.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\1\application-shell_43752413\src\scripts\controller\Controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\apprun_70208212\docs\assets\javascripts\bundle.fe8b6f2b.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bigpipe_9049159\test\pipe.test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\1\AiEditor_716968913\src\ai\core\client\ws\WebSocketClient.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\browsercms_164151\test\dummy\public\design\JS\css3-mediaqueries.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\beautifulhugo_53404533\static\js\staticman.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\api_111184073\packages\rpc-provider\src\ws\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\api_111184073\packages\typegen\src\util\wsMeta.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\api-designer_11373986\app\scripts\api-designer-worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\api-designer_11373986\dist\scripts\api-designer-worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\api-designer_11373986\dist\scripts\api-designer-worker.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bilimini_84894295\js\utils.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bootstrap-lightbox_4088556\docs\assets\js\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\bootstrap-lightbox_4088556\js\tests\vendor\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\booktree_48174760\app\lib\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\Bonjourr_187342565\src\scripts\utils.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\1\apparatus_42900355\vendor\firebase-auth-827.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\BassoonTracker_78756952\script\src\filesystem.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\BassoonTracker_78756952\script\src\lib\dropbox.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\140bytes_1780189\server.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\1\auth0.js_13125982\dist\auth0.min.esm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\1\auth0.js_13125982\dist\auth0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\darkreader_26682105\src\background\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\darkreader_26682105\src\inject\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\cli_159981830\Extensions\webnowplaying.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\decap-cms_29514104\functions\publish.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\complete-javascript-course_137389229\17-Modern-JS-Modules-Tooling\final\dist\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\calibre-web_40089578\cps\static\js\libs\reader.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\caprover_108221729\src\user\system\CaptainManager.ts,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\cropperjs_43134061\dist\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\dalai_613075789\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\dalai_613075789\bin\web\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\dalai_613075789\bin\web\public\socket.io.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\color-thief_2688455\dist\color-thief.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\color-thief_2688455\dist\color-thief.umd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\color-thief_2688455\src\color-thief.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Dexie.js_17203748\addons\dexie-cloud\src\WSObservable.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\Dexie.js_17203748\addons\Dexie.Syncable\test\unit\tests-syncprovider.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\Dexie.js_17203748\addons\Dexie.Syncable\test\unit\tests-WebSocketSyncServer.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\dashing_5101823\templates\project\assets\javascripts\d3-3.2.8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\canvas-confetti_119001901\build\serve.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\2\CSS-Inspiration_152179772\assets\js\gittalk.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\django-cms_143580\cms\tests\frontend\unit\helpers\mock-ajax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cytoscape.js_2255947\debug\FileSaver.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatGPTBox_614258120\src\services\clients\poe\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\cli_139910229\workspaces\arborist\test\fixtures\install-types\proxyreg.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\2\cropper_16977232\dist\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\src\generators\javascript\xhr.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\commented_json_with_session.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\get_with_all_numerical_data.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\get_with_browser_headers.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\get_with_data.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\get_with_data2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\get_with_env_var.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\multiline_post_with_data.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\multipart_post.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\post_empty.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\post_with_data_with_percent_sign.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\post_with_urlencoded_data.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\post_with_urlencoded_data_and_headers.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\javascript-xhr\post_xpost.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_basic_auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_basic_auth_no_user.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_follow_redirect.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_with_all_numerical_data.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_with_browser_headers.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_with_env_var.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\get_with_single_header.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_empty.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_escaped_double_quotes_in_single_quotes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_escaped_single_quotes_in_double_quotes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_browser_headers.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_data-ascii.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_data_binary.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_data_raw.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_double_quotes_inside_single_quotes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_escaped_double_quotes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_single_quotes_inside_double_quotes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_urlencoded_data.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\post_with_urlencoded_data_and_headers.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\put_basic_auth_json_data.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\curlconverter_28468993\test\fixtures\node-request\strange_http_method.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\chartkick_9906653\vendor\assets\javascripts\chartkick.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\casl_97627474\docs-src\src\services\http.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\colyseus_46684632\bundles\colyseus\test\Integration.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\css-in-js_36229979\ReadmeSrc\scripts\fetchData.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\dash.js_6621471\src\streaming\net\XHRLoader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\dash.js_6621471\src\streaming\protection\controllers\ProtectionController.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\deployd_2367681\test\support.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\deployd_2367681\test-app\test-attach.js,Inter-Process Communication (IPC),92,JavaScript*,WebSocket Server-side based on socket.io in JavaScript,"['Step 1: Import the necessary modules (http and socket.io).', 'Step 2: Create an HTTP server to handle incoming requests.', 'Step 3: Bind socket.io to the HTTP server for WebSocket communication.', ""Step 4: Set up event listeners for 'connection','message', 'disconnect' events and start the server.""]"
D:\CAE\Splited_Repository\2\derby_1590408\test\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\chrome-remote-interface_9503997\lib\chrome.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\2\chrome-remote-interface_9503997\lib\websocket-wrapper.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\Covenant_169597853\Covenant\wwwroot\lib\signalr\dist\browser\signalr.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\codebox_12231467\lib\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\Cronicle_49249526\lib\discovery.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\2\compodoc_71109869\src\resources\js\libs\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\compodoc_71109869\src\resources\js\libs\promise.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Crawler_Illegal_Cases_In_China_211625898\case3\只因写了一段爬虫，公司200多人被抓！_files\fereport438bee.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Crawler_Illegal_Cases_In_China_211625898\case3\只因写了一段爬虫，公司200多人被抓！_files\list_tpl.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cube_2374578\lib\cube\server.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\2\conversational-form_70910101\landingpage\build\conversational-form-docs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\datamaps_6631214\src\js\components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cms_89448518\src\SSCMS.Web\wwwroot\sitefiles\assets\lib\axios-1.6.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cms_89448518\src\SSCMS.Web\wwwroot\sitefiles\assets\lib\wangEditor\wangEditor.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cms_89448518\src\SSCMS.Web\wwwroot\sitefiles\resources\flashes\mediaelement\mediaelement-and-player.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cms_89448518\src\SSCMS.Web\wwwroot\sitefiles\resources\flashes\mediaelement\mediaelement.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cms_89448518\src\SSCMS.Web\wwwroot\sitefiles\resources\jquery\showloading\js\jquery-1.3.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Cnblogs-Theme-SimpleMemory_142394932\docs\v0\Js\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Cnblogs-Theme-SimpleMemory_142394932\docs\v1\Js\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Cnblogs-Theme-SimpleMemory_142394932\docs\v2\Js\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\devd_43268361\livereload\static\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\DeerResume_23776930\bower\components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\complete-node-bootcamp_191775260\2-how-node-works\final\streams.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\2\complete-node-bootcamp_191775260\4-natours\after-section-14\public\js\bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\content_251606126\src\runtime\internal\websocket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\cocos2d-html5_3224614\external\gaf\Library\GAFLoader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cocos2d-html5_3224614\external\pluginx\platform\facebook_sdk.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cocos2d-html5_3224614\external\socketio\socket.io.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\dingtalk_92817155\dependencies.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\claygl_10186000\src\core\request.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\DevOps_553120474\docs\webassembly\files\apps\hello-world\hello.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\comfortable-mexican-sofa_1122534\app\assets\javascripts\comfy\vendor\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\ChatGPT-On-CS_768534013\src\main\gptproxy\spark\resources\chat\completions.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\crawler_45406338\tests\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\charisma_5429498\bower_components\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\django-material_29337344\material\components\form\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\django-material_29337344\material\static\material\js\materialize.components.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\django-material_29337344\material\static\material\js\turbolinks.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chainlist_466682654\hooks\useRPCData.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\curso-javascript-ninja_30896610\challenge-32\server\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\curso-javascript-ninja_30896610\challenge-33\server\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\checkbox_265085339\checkbox.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\sendmsg.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\Template.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\node_modules\axios\dist\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\checkbox_265085339\node_modules\axios\lib\adapters\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\17k.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_fulizx.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_monster.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_ylc.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_yx.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_yy.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\4399_zhb.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\ablesci.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\acfun.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\aihao.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\aliyun.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\aoqi.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\bigfun.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\ccw.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\cg163.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\coolbuy.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\du163.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\duokan.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\everphoto.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\gobing.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hifini.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hscy.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\huashi6.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hykb.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hykb_activities.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hykb_gamesign.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\hzw.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\jiepei.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\jjwxc_Welfare.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\kaoshibao.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\ldygo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\lenovo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\linkai.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\linovel.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\lkong.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\mdd.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\mediportal.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\meizu.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\mhy_xqtg.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\missevan.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\mtmc.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\mt_sign.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\nga.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\oshwhub.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\pdg2pdf.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\pfjsq.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\pingu.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\qidian.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\Qoo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\quark.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\quqi.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\rpg66.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\shanyi.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\shanyi_fansz.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\ssly.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\sucai999.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\sxmd.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\wb.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\xiang5.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\xiaobai.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\xjvideo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\yunys.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\yybs_check.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkbox_265085339\scripts\zbwx.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\cluster_1356074\lib\master.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\2\cloudquery_166514296\backend\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\DB_222452465\concern\webcv2\templates\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\chalktalk_20341242\lib\utility.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\chalktalk_20341242\server\main.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\2\container2wasm_601918925\examples\wasi-browser\htdocs\ws-delegate.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\cezerin_72197229\src\admin\client\lib\apiWebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\connect-mongo_1453143\example\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\connect-mongo_1453143\example\mongoose.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\canvas-test_30332006\src\Game-demo\FlppyPeople\preloadjs-0.4.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\canvas-test_30332006\src\Game-demo\runningMan\preloadjs-0.4.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\chatgpt.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-1.12.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.5.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.0.6.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.1.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.1.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.2.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.10.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.11.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.12.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.13.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.14.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.15.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.16.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.17.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.18.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.19.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.5.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.6.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.7.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.8.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.3.9.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.4.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.4.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.4.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.4.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.5.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.5.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.5.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.6.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.6.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.6.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.6.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt-2.6.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\dist\chatgpt.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chatgpt.js_614250126\starters\chrome\extension\lib\chatgpt.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\devconnector_2.0_183677633\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\devconnector_2.0_183677633\routes\api\profile.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\cloudcmd_4585500\client\dom\load.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\democracyos_9265076\lib\api\signup\lib\signup.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\cinema-microservice_79661334\api-gateway\src\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\confs.tech_99970981\scripts\heroku-start.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\devtron_51622074\test\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\curso-js_217322229\node\aula8\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\d3plus_7512098\packages\export\src\saveElement.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cyclotron_44770680\cyclotron-svc\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\CommonsNet_59821494\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\CommonsNet_59821494\js\jquery.2.0.0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cmap.api.fossasia.net_27139928\external\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\Damn-Vulnerable-GraphQL-Application_335754653\static\jquery\graphql.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\dizquetv_269846860\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\dizquetv_269846860\src\plexTranscoder.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\channel3_50746813\web\page\menuinterface.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\checkinpanel_398717902\ck_aqc.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkinpanel_398717902\ck_du163.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkinpanel_398717902\ck_lenovo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\2\checkinpanel_398717902\utils.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\depthy_18924393\app\scripts\services\depthy.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\depthy_18924393\app\scripts\vendor\LensBlurDepthExtractor.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\classic-react-workshop_33502554\subjects\16-Redux\exercise\utils\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\classic-react-workshop_33502554\subjects\16-Redux\solution\utils\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\dnt_407968049\tests\web_socket_project\mod.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\dataset_2446843\dist\node\miso.ds.deps.0.4.1.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\2\CascadeStudio_281906706\node_modules\opentype.js\dist\opentype.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\casino-server_27923115\lib\login_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\gorilla\websocket\examples\chat\home.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\departure-mono_833840800\src\utils.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\chrome-devtools-autosave_2520793\chrome\background.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\course-tencent-cloud_296000242\public\static\home\js\chapter.live.chat.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\course-tencent-cloud_296000242\public\static\lib\vod-js-sdk-v6.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\course-tencent-cloud_296000242\public\static\lib\dplayer\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\course-tencent-cloud_296000242\public\static\lib\dplayer\flv.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cocogoat_414824130\src\resource-main.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\cocogoat_414824130\src\modules\webcontrol.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\2\cocogoat_414824130\src\plugins\tongji.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\2\devsonket.github.io_146095243\gatsby-node.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\editor.js_47039255\devserver.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\en.javascript.info_93253246\5-network\11-websocket\chat.view\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\docz_125596489\core\docz\src\hooks\useDataServer.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\flv.js_58623321\src\io\xhr-moz-chunked-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\flv.js_58623321\src\io\xhr-msstream-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\flv.js_58623321\src\io\xhr-range-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\draft-js_52113921\examples\draft-0-10-0\universal\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\es6tutorial_18964487\app\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\gentelella_35658863\vendors\cropper\dist\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\gentelella_35658863\vendors\dropzone\dist\min\dropzone-amd-module.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\gentelella_35658863\vendors\dropzone\dist\min\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\gentelella_35658863\vendors\mjolnic-bootstrap-colorpicker\serve.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\gentelella_35658863\vendors\parsleyjs\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fks_6256729\fks_chart\bower_components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fks_6256729\fks_chart\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fks_6256729\fks_chart\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\flux_22046023\examples\flux-async\server\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\face-api.js_134035452\examples\examples-browser\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\forever_942903\lib\forever\worker.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\forever_942903\test\core\start-stop-json-array-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\forever_942903\test\worker\multiple-workers-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\electerm_106087444\build\bin\custom-upload.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\3\electerm_106087444\src\app\server\download-upgrade.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\electerm_106087444\src\app\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\electerm_106087444\src\app\server\ssh-tunnel.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\3\electerm_106087444\src\app\server\sync.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\electerm_106087444\src\client\entry\rle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\electerm_106087444\src\client\entry\worker.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\elysia_574104779\test\ws\utils.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\falcor_30732364\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\falcor_30732364\test\integration\express.spec.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io\lib\server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io\node_modules\ws\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io-client\engine.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io-client\lib\transports\polling-xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io-client\lib\transports\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\engine.io-client\node_modules\ws\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\faye-websocket\examples\autobahn_client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\faye-websocket\examples\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\faye-websocket\examples\server.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\faye-websocket\spec\runner.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\karma-mocha-reporter\node_modules\socket.io-client\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\log4js\examples\example-connect-logger.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\log4js\lib\appenders\multiprocess.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io\node_modules\engine.io\lib\server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io-client\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io-client\node_modules\engine.io-client\engine.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io-client\node_modules\engine.io-client\lib\transports\polling-xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io-client\node_modules\engine.io-client\lib\transports\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\socket.io-client\node_modules\ws\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\tiny-lr-fork\lib\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\tiny-lr-fork\lib\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\tiny-lr-fork\test\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\underscore.string\test\test_underscore\vendor\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\node_modules\ws\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\dom-to-image_34136758\spec\dom-to-image.spec.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\gekko_10020773\exchange\wrappers\exmo.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\gekko_10020773\plugins\candleUploader.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\gekko_10020773\web\server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\3\gekko_10020773\web\vue\dist\vendor\reconnecting-websocket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\gekko_10020773\web\vue\public\vendor\reconnecting-websocket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\gdbgui_72066935\gdbgui\static\vendor\js\socket.io-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\engine_19696006\examples\src\lib\basis\basis.wasm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\engine_19696006\examples\src\lib\draco\draco.wasm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\engine_19696006\examples\src\lib\twgsl\twgsl.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\engine_19696006\scripts\textmesh\opentype.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\engine_19696006\src\platform\net\http.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\easy-mock_101556009\controllers\mock.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\easy-mock_101556009\controllers\util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\flowchart.js_11474382\devserver.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\EaselJS_1280658\_assets\libs\preloadjs-NEXT.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\EaselJS_1280658\_assets\libs\soundjs-NEXT.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\ethers.js_63465664\lib.esm\_admin\test-browser.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\ethers.js_63465664\src.ts\_admin\test-browser.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\enquirer_66801791\examples\auth\oauth.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\elasticsearch-dump_15321010\test\csv-import.tests.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\elasticsearch-dump_15321010\test\csv-nested.tests.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\elasticsearch-dump_15321010\test\parentchild.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\elasticsearch-dump_15321010\test\test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\elasticsearch-dump_15321010\test\transform.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\Eve_12719776\src\system.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\formidable_655209\test-legacy\system\test-multi-video-upload.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\3\esprima_2833537\test\3rdparty\mootools-1.4.5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\elasticsearch-sql_23282991\src\site-server\node-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\Eel_115559503\eel\eel.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\freeboard_11726302\lib\js\thirdparty\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\embla-carousel_176347512\docs\1128-994c5eaaaaf1ad979cb0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\freecodecamp.cn_55026106\server\boot\randomAPIs.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\freecodecamp.cn_55026106\server\utils\index.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\fusuma_131081109\packages\fusuma\src\server\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\entropic_182423586\cli\lib\commands\publish.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\3\fuelux_4924151\test\regression\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\exif-js_298375\exif.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\exif-js_298375\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\favorites-web_65176628\app\src\main\resources\static\vendor\cropper\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\evershop_364854508\packages\evershop\src\modules\checkout\api\getShippingMethods\sendMethods.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\evershop_364854508\packages\evershop\src\modules\paypal\api\paypalCaptureAuthorizedPayment\[bodyParser]capture.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\evershop_364854508\packages\evershop\src\modules\paypal\pages\frontStore\paypalReturn\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\framework_7190749\utils.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\3\framework_7190749\test\views\f.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\folio-2019_196761128\static\draco\draco_wasm_wrapper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\folio-2019_196761128\static\draco\gltf\draco_wasm_wrapper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\extension.js_306484159\programs\develop\webpack\plugin-reload\extensions\chrome-manager-extension\reload-service.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\extension.js_306484159\programs\develop\webpack\plugin-reload\extensions\chromium-based-manager-extension\reload-service.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\extension.js_306484159\programs\develop\webpack\plugin-reload\extensions\edge-manager-extension\reload-service.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\extension.js_306484159\programs\develop\webpack\plugin-reload\extensions\firefox-manager-extension\reload-service.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\extension.js_306484159\programs\develop\webpack\plugin-reload\extensions\gecko-based-manager-extension\reload-service.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\egret\egret.web.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\egretia-sdk\egretia-sdk.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\media\media.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\media\media.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\wasm_libs\egret\egret.webassembly.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\build\wasm_libs\egretWithDragonBones\egret.webassembly.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\tools\lib\utils.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\3\egret-core_16772886\tools\lib\utils.ts,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\3\dzzoffice_29054113\dzz\DPlayer\images\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dzzoffice_29054113\dzz\DPlayer\images\flv.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dzzoffice_29054113\static\lyear\js\cropper\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fastjson2_482425877\example-spring-test\src\main\resources\hello.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\fastjson2_482425877\example-spring6-test\src\main\resources\hello.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\flow-typed_42698429\definitions\npm\ws_v7.x.x\flow_v0.104.x-\test_ws_v7.x.x.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\3\douyuEx_233348740\src\require\WebSocket\WebSocket_UnLogin.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\FastForward_404295988\src\bypasses\lootlink.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\FastForward_404295988\src\bypasses\workink.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\FileAPI_3197382\node\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\FileAPI_3197382\plugins\FileAPI.id3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\dom-examples_81828816\indexeddb-api\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\everyauth_1574656\example\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\everyauth_1574656\lib\modules\oauth2.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\extension-boilerplate_82643171\src\scripts\livereload.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\doozerd_1633914\web\main.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\EFAK_80907025\efak-web\src\main\resources\statics\assets\vendors\cropperjs\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\EFAK_80907025\efak-web\src\main\resources\statics\assets\vendors\dropzone\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\foaas_11469732\lib\foaas.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\express-gateway_62678265\test\e2e\oauth2-authorization-code.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\express-gateway_62678265\test\e2e\policy-seq-oauth2-expression-log-ratelimit-proxy.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\express-gateway_62678265\test\policies\oauth\consumer-and-token-headers.test.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\express-gateway_62678265\test\policies\proxy\proxy.test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\flow.js_12662085\samples\Node.js\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\front-end-Interview-Questions_15568271\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\front-end-Interview-Questions_15568271\slides\plugin\leap\leap.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\front-end-Interview-Questions_15568271\slides\plugin\multiplex\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\front-end-Interview-Questions_15568271\slides\plugin\notes-server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\getting-started_237987374\app\src\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\EasyImages2.0_188228357\public\static\tinyfilemanager\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\EasyImages2.0_188228357\public\static\zui\lib\uploader\zui.uploader.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\FFCreator_307274978\docs\_js\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\docker-wyze-bridge_380502721\app\static\webrtc.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\generator-chrome-extension_7846848\app\templates\scripts\chromereload.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\ganache_86362151\packages\ethereum\ethereum\src\forking\handlers\ws-handler.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\echarts-gl_30224827\test\lib\download.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\expo-cli_128895073\packages\xdl\scripts\updateCaches.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\fe4ml-zh_133822230\asset\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\easy-markdown-editor_112882776\src\js\easymde.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DoodleMaster_110329148\frontend\js\socket.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\faker2_464113799\JDSignValidator.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\faker2_464113799\jd_autock.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\faker2_464113799\jd_lxing_draw.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\faker2_464113799\jd_try.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\faker2_464113799\jd_whx_drawShopGift.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\faker2_464113799\sign_graphics_validate.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\faker2_464113799\function\qlApi.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\faker2_464113799\utils\baseUtils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\eidos_651170890\electron\server\api-agent.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\eidos_651170890\worker\web-worker\api-agent\ws.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\examples_123316949\cdp\raw_websocket.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\3\dooringx_384142950\script\translate.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\Docker-Proxy_812303359\hubcmdui\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\3\Docker-Proxy_812303359\hubcmdui\web\admin.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\gethttpsforfree_45364940\js\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\drywall_7268697\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\doppio_3434927\Grunttasks.ts,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\Furion_274069307\framework\Furion\SpecificationDocument\Assets\index-mini-profiler.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\Furion_274069307\framework\Furion\SpecificationDocument\Assets\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\Furion_274069307\framework\Furion.Pure\SpecificationDocument\Assets\index-mini-profiler.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\Furion_274069307\framework\Furion.Pure\SpecificationDocument\Assets\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\EventSource_1475331\tests\nodechat.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\electron-vue-music_141563868\src\main\util\util.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\3\FooTable_6710201\docs\jsdocs\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\drill_91699290\example\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\esp32-wifi-penetration-tool_354963447\components\webserver\utils\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\eme_63537564\app\eme\menu.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\E-Hentai-Downloader_37268415\src\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\g9_57250889\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\abc.net.au\abc.net.au.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\allente.dk\allente.dk.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\allente.fi\allente.fi.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\allente.no\allente.no.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\allente.se\allente.se.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\anteltv.com.uy\anteltv.com.uy.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\arirang.com\arirang.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\awilime.com\awilime.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\bein.com\bein.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\beinsports.com\beinsports.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\cableplus.com.uy\cableplus.com.uy.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\canalplus.com\canalplus.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\canalplus.com\canalplus.com.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\cgates.lt\cgates.lt.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\chaines-tv.orange.fr\chaines-tv.orange.fr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\clickthecity.com\clickthecity.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\content.astro.com.my\content.astro.com.my.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\cosmotetv.gr\cosmotetv.gr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\cubmu.com\cubmu.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\cyta.com.cy\cyta.com.cy.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\dens.tv\dens.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\digea.gr\digea.gr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\digiturk.com.tr\digiturk.com.tr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\directv.com\directv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\directv.com\directv.com.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\dishtv.in\dishtv.in.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\dna.fi\dna.fi.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\dstv.com\dstv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\dstv.com\dstv.com.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\elcinema.com\elcinema.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\entertainment.ie\entertainment.ie.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\epg.112114.xyz\epg.112114.xyz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\epg.iptvx.one\epg.iptvx.one.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\epg.telemach.ba\epg.telemach.ba.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\epg.telemach.me\epg.telemach.me.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\firstmedia.com\firstmedia.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\foxsports.com.au\foxsports.com.au.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\foxtel.com.au\foxtel.com.au.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\freeview.co.uk\freeview.co.uk.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\galamtv.kz\galamtv.kz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\gatotv.com\gatotv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\gigatv.3bbtv.co.th\gigatv.3bbtv.co.th.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\guida.tv\guida.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\guidatv.sky.it\guidatv.sky.it.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\horizon.tv\horizon.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\horizon.tv\horizon.tv.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\hoy.tv\hoy.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\i.mjh.nz\i.mjh.nz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\iltalehti.fi\iltalehti.fi.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\indihometv.com\indihometv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\jiotv.com\jiotv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\m.tv.sms.cz\m.tv.sms.cz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\m.tving.com\m.tving.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\magticom.ge\magticom.ge.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\maxtvgo.mk\maxtvgo.mk.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\melita.com\melita.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\meo.pt\meo.pt.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\meuguia.tv\meuguia.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mewatch.sg\mewatch.sg.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mi.tv\mi.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mncvision.id\mncvision.id.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mojmaxtv.hrvatskitelekom.hr\mojmaxtv.hrvatskitelekom.hr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mon-programme-tv.be\mon-programme-tv.be.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\movistarplus.es\movistarplus.es.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mts.rs\mts.rs.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mujtvprogram.cz\mujtvprogram.cz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\musor.tv\musor.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mysky.com.ph\mysky.com.ph.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\mytvsuper.com\mytvsuper.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\nostv.pt\nostv.pt.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\novacyprus.com\novacyprus.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\novasports.gr\novasports.gr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\nowplayer.now.com\nowplayer.now.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\nuevosiglo.com.uy\nuevosiglo.com.uy.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\nzxmltv.com\nzxmltv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\ontvtonight.com\ontvtonight.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\opto.sic.pt\opto.sic.pt.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\orangetv.orange.es\orangetv.orange.es.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\osn.com\osn.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\pickx.be\pickx.be.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\player.ee.co.uk\player.ee.co.uk.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\playtv.unifi.com.my\playtv.unifi.com.my.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\plex.tv\plex.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programacion-tv.elpais.com\programacion-tv.elpais.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programacion.tcc.com.uy\programacion.tcc.com.uy.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programetv.ro\programetv.ro.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programme-tv.net\programme-tv.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programme-tv.vini.pf\programme-tv.vini.pf.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programme-tv.vini.pf\programme-tv.vini.pf.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programme.tvb.com\programme.tvb.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\programtv.onet.pl\programtv.onet.pl.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\reportv.com.ar\reportv.com.ar.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\rikstv.no\rikstv.no.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\rotana.net\rotana.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\sat.tv\sat.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\shahid.mbc.net\shahid.mbc.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\singtel.com\singtel.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\sjonvarp.is\sjonvarp.is.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\sky.co.nz\sky.co.nz.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\sky.de\sky.de.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\skylife.co.kr\skylife.co.kr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\snrt.ma\snrt.ma.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\starhubtvplus.com\starhubtvplus.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\stod2.is\stod2.is.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\streamingtvguides.com\streamingtvguides.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\superguidatv.it\superguidatv.it.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tapdmv.com\tapdmv.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\teleboy.ch\teleboy.ch.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\telenet.tv\telenet.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\teliatv.ee\teliatv.ee.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\telkussa.fi\telkussa.fi.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\telsu.fi\telsu.fi.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tivie.id\tivie.id.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tivu.tv\tivu.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\toonamiaftermath.com\toonamiaftermath.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\turksatkablo.com.tr\turksatkablo.com.tr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv-programme.telecablesat.fr\tv-programme.telecablesat.fr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv-programme.telecablesat.fr\tv-programme.telecablesat.fr.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv-spored.siol.net\tv-spored.siol.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.blue.ch\tv.blue.ch.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.dir.bg\tv.dir.bg.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.lv\tv.lv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.magenta.at\tv.magenta.at.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.mail.ru\tv.mail.ru.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.movistar.com.pe\tv.movistar.com.pe.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.nu\tv.nu.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.sfr.fr\tv.sfr.fr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv.trueid.net\tv.trueid.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv24.co.uk\tv24.co.uk.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv24.se\tv24.se.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tv2go.t-2.net\tv2go.t-2.net.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvarenasport.com\tvarenasport.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvarenasport.hr\tvarenasport.hr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvcesoir.fr\tvcesoir.fr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvgids.nl\tvgids.nl.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvguide.com\tvguide.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvguide.com\tvguide.com.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvguide.myjcom.jp\tvguide.myjcom.jp.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvhebdo.com\tvhebdo.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvheute.at\tvheute.at.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvim.tv\tvim.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvinsider.com\tvinsider.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvireland.ie\tvireland.ie.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvmusor.hu\tvmusor.hu.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvmustra.hu\tvmustra.hu.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvpassport.com\tvpassport.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvplus.com.tr\tvplus.com.tr.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\tvprofil.com\tvprofil.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\v3.myafn.dodmedia.osd.mil\v3.myafn.dodmedia.osd.mil.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\vidio.com\vidio.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\virgintvgo.virginmedia.com\virgintvgo.virginmedia.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\virgintvgo.virginmedia.com\virgintvgo.virginmedia.com.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\visionplus.id\visionplus.id.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\vivoplay.com.br\vivoplay.com.br.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\walesi.com.fj\walesi.com.fj.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\watch.sportsnet.ca\watch.sportsnet.ca.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\watchyour.tv\watchyour.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\wavve.com\wavve.com.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\web.magentatv.de\web.magentatv.de.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\webtv.delta.nl\webtv.delta.nl.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\webtv.delta.nl\webtv.delta.nl.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\xem.kplus.vn\xem.kplus.vn.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\xumo.tv\xumo.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\yes.co.il\yes.co.il.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\zap.co.ao\zap.co.ao.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\ziggogo.tv\ziggogo.tv.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\ziggogo.tv\ziggogo.tv.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\epg_347434932\sites\zuragt.mn\zuragt.mn.config.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\FakeScreenshot_172642413\dist\background.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\FakeScreenshot_172642413\dist\jquery.upload.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\FakeScreenshot_172642413\dist\page.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\GDIndex_212965628\code-builder\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\fraidycat_193195917\src\js\frontend\storage.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\EmulatorJS_354955148\data\src\socket.io.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\FIR_32028167\incidents\static\vendor\nvd3\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DotNetOpenAuth_4798\samples\OAuthAuthorizationServer\Scripts\MicrosoftAjax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DotNetOpenAuth_4798\samples\OpenIdProviderMvc\Scripts\jquery-1.3.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DotNetOpenAuth_4798\samples\OpenIdProviderMvc\Scripts\MicrosoftAjax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fluent-nhibernate_126652\build\docu\templates\js\jquery-1.3.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fenix_17832279\src\lib\api\api.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\fenix_17832279\src\lib\api\requestbin.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\fenix_17832279\src\lib\api\router.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\3\fenix_17832279\src\lib\api\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\fb-sleep-stats_48824160\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\examples_74583176\public\3.24\js\pouchdb-6.0.7.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\examples_74583176\public\3.55\assets\audio\sid\jsSID.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\examples_74583176\public\3.55\js\pouchdb-6.0.7.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\examples_74583176\public\assets\audio\sid\jsSID.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fries_9866547\dist\fries.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\fries_9866547\lib\js\stack.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\express-fileupload_39971972\example\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\flux-react-router-example_23259665\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\Flux-Slider_1705750\js\zepto\zepto.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\filerobot-image-editor_172349010\packages\react-filerobot-image-editor\src\utils\translator.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\Editr.js_9606326\editr\libs\parser.less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\Editr.js_9606326\editr\parsers\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DormitoryManager_192085156\out\artifacts\dormitorySystem_war_exploded\js\jquery-1.3.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\DormitoryManager_192085156\web\js\jquery-1.3.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\ganbreeder_158024495\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\ghostium_14315553\assets\js\foot-scripts.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\ghostium_14315553\assets\js\head-scripts.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\controllers\recognize.controller.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\util\frigate.util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\util\fs.util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\util\heartbeat.util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\util\mqtt.util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\api\src\util\process.util.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\double-take_346734534\frontend\public\js\plausible.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\documind_889684712\core\dist\openAI.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\documind_889684712\core\dist\utils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\3\gbajs_5340044\resources\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\elm-live_46166473\lib\src\start.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\3\elm-live_46166473\lib\src\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\3\DonPAPI_410816681\donpapi\res\gui\assets\index-d962605a.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\ember-app-kit_11080240\tasks\express-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\3\electron-compile_35356641\test\fixtures\minified.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\3\front-end-plugins_29077674\detail\snap\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\howler.js_7874074\dist\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\howler.js_7874074\src\howler.core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\grapesjs_50146229\packages\core\src\utils\fetch.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\applestore\applestore.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\bilibili\bilibili_plus.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\dingdong\dingdong_checkin.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\famijia\famijia_checkin.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\luka\luka_signin.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\obsolete\10010\unicom_signin.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\obsolete\10010\unicom_signin.min.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\obsolete\eleme\eleme_daily.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\obsolete\wanda\wanda_checkin.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\smzdm\smzdm_daily.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\smzdm\smzdm_remove_ads.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\synology\downloadstation.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\synology\DSM6\downloadstation.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\testflight\testflight.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\script\tieba\tieba_signin.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\source\javascript\576875ff1c6a706bc2ac0cfc005c74f9.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\source\javascript\7abc2b807287bb592981145658b7b20b.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\source\javascript\c34dc3226966fd23aaf8a3af2fbb7dad.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\ios_rule_script_276008164\source\javascript\dc29cf91928fc9cd4f90ade43877ba13.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\hapi_2163263\test\core.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\4\hapi_2163263\test\transmit.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\http-proxy-middleware_32219142\examples\express\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\http-proxy-middleware_32219142\examples\response-interceptor\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\history.js_1274749\vendor\mootools.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\history.js_1274749\vendor\right.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jquery-validation_648414\demo\tinymce\tiny_mce.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\56_twitter\37_other-implementations\02_tommy\assets\scripts\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week5\web-components-training-exercises\styleguide\webcomponents.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week6\4-js\1-jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\istanbul_5775917\test\browser\support\vendor\yui-support.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\gridsome_143078055\gridsome\lib\serve.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\gridsome_143078055\packages\cli\lib\commands\create.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\gridsome_143078055\packages\source-drupal\gridsome.server.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\gridsome_143078055\packages\source-drupal\lib\Entity.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\gridsome_143078055\packages\source-strapi\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\gridsome_143078055\packages\source-wordpress\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Heimdall_119047018\vendor\phpunit\php-code-coverage\src\Report\Html\Renderer\Template\js\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\js-ipfs_20312497\packages\ipfs-grpc-client\src\grpc\transport.node.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\guess_127689297\experiments\guess-static-sites\predictiveFetching.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\guess_127689297\experiments\guess-static-sites\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\guess_127689297\experiments\guess-static-sites\test\fixtures\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\Hospital_57602929\submitHospital\submit.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\inertia_174200859\tests\app\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jquery.adaptive-backgrounds.js_14454268\lib\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\gitfolio_185236319\run.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\gitfolio_185236319\ui.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\godot-demo-projects_60349380\networking\webrtc_signaling\server_node\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day36-37(beego框架)\code\day36\QianfengBeegoDemo1\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day36-37(beego框架)\code\day37\BeegoDemo2\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day36-37(beego框架)\code\day37\MysqlDemo\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day38_1、项目搭建和用户注册功能\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day38_2、用户登录功能\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day38_3、Session功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day39_1、写文章功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day39_2、项目首页功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day39_3、项目详情功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day40_1、修改文章功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day40_2、删除文章功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day40_3、标签功能开发\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day41_1、首页功能扩展\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day41_2、文件上传和图片展示功能\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day38-41(beego框架开发博客系统)\code\day41_3、关于我和项目总结\myblog\static\js\reload.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day54-55(iris框架)\code\day55\QianfengCmsProject\static\js\app.4f474f1374a0f73cfdf0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\how2_51649722\lib\srv.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\gogocode_344026346\packages\transform-project\vue-hackernews-2.0\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\graphql-tools_54432168\packages\executors\legacy-ws\src\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\hexo-theme-matery_146325535\source\libs\dplayer\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hexo-theme-matery_146325535\source\libs\gitment\gitment.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Haraka_1464380\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\html-minifier_504220\benchmark.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-17f8eed5.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-33ed76c0.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-78f3984a.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-8355422b.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-a3bb8676.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-d3be62c7.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\index-e0b66e9f.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-05cdf58e.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-1cb0aa9d.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-45778f1d.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-50dde246.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-66c8006d.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-ef28408a.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\jsmpeg-fd152ef0.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\live-go2rtc-0795a62f.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Home-AssistantConfig_70612113\config\www\community\frigate-hass-card\live-jsmpeg-9c767737.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\hakuneko_95580598\src\web\js\exif-js.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hakuneko_95580598\src\web\js\protobufjs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\html5demos_500370\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\goatcounter_188968112\public\dashboard.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\golang-for-nodejs-developers_163927392\examples\udp_server.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\4\JavaScript-Load-Image_2967938\js\load-image.all.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\grpc-web_64409189\client\grpc-web\src\transports\websocket\websocket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\jsbin_324747\lib\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jsbin_324747\lib\routes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\jsbin_324747\public\js\vendor\eventsource.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jsbin_324747\public\js\vendor\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jsbin_324747\public\js\vendor\tern\plugin\node.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\hello_246220204\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\gqless_168271241\packages\subscriptions\src\subscription\client.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Google-Assistant-Unofficial-Desktop-Client_233455469\app\src\auth\authHandler.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\Google-Assistant-Unofficial-Desktop-Client_233455469\app\src\lib\pv_workers\pv_porcupine.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\instant.io_22553278\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\1.2.6\src\ajax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\2.0.3\Ajax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\2.1.1\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\慕课网教程案例\jQuery源码分析\13：数据交互\接口设计的优劣.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\慕课网教程案例\jQuery源码分析\13：数据交互\设计ajax库需要考虑的问题.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jQuery_15890297\测试案例\模块分类\ajax\test.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\home-automation_76486448\phone-app\app\containers\App.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\home-automation_76486448\server\index.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\4\guild.xyz_404312816\src\hooks\usePinata\utils\pinataUpload.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hummingbird_605475\lib\tracker.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\4\gowebsocket_199363403\views\home\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\graphene_3497763\graphene.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\graphene_3497763\build\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\graphene_3497763\vendor\js\d3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Gumby_8557873\js\libs\jquery-2.0.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Inspeckage_52749312\app\src\main\assets\HTMLFiles\js\logcat.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Inspeckage_52749312\app\src\main\assets\HTMLFiles\js\prototype.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\hot.proxy.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\websocket\public\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\hugo-coder_121858752\layouts\partials\analytics\applicationinsights.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jdpro_645332264\JDSignValidator.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jdpro_645332264\function\jxAlgo.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\jdpro_645332264\function\magic.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\jdpro_645332264\function\sign_graphics_validate.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Gladys_36928490\front\src\utils\Session.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\api\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\free-mobile\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.loadDeviceDetails.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.loadDevices.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.loadThermostatDetails.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.loadWeatherStationDetails.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.refreshingTokens.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.retrieveTokens.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\netatmo\lib\netatmo.setValue.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\Gladys_36928490\server\services\openweather\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\github-trending-repos_109145965\scripts\helpers\trends.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\GoogleScraper_14986290\Tests\data\no_results_literal\bing.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GoogleScraper_14986290\Tests\data\page_number_selector\bing_5.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GoogleScraper_14986290\Tests\data\uncompressed_no_results_serp_pages\bing.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GoogleScraper_14986290\Tests\data\uncompressed_serp_pages\hello_bing_de_ip.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\html5_rtsp_player_54034412\example\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\html5_rtsp_player_54034412\example\streamedian.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\html5_rtsp_player_54034412\src\transport\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\GreenDroid_656893\GreenDroid\doc\assets\jquery-resizable.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\JSbooks_5243041\js\less-1.3.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\atmosphere-chat\overlays\org.atmosphere.client.javascript-2.0.7\javascript\atmosphere-min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\atmosphere-chat\overlays\org.atmosphere.client.javascript-2.0.7\javascript\atmosphere.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\binary\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\chat\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\encoder\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-async\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-config\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-javatypes\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-partial\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-programmatic-async\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-programmatic-config\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-programmatic-injection\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-programmatic-partial\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-security\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-singleton\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\endpoint-wss\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\httpsession\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\injection\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\messagesize\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\parameters\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\properties\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\subprotocol\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\websocket-vs-rest\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javaee7-samples_12414592\websocket\whiteboard\src\main\webapp\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\griffith_177081309\packages\griffith-mp4\src\fetch.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hack.chat_38568813\client\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\glslEditor_49336543\src\js\io\Share.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\glslEditor_49336543\src\js\tools\common.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\graphql.js_81543837\graphql.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\graphql.js_81543837\graphql.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\gotham_98018486\examples\websocket\src\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\isolated-vm_91866654\inspector-example.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\4\javaScript_50885815\roundabout\js\jquery-2.0.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\glightbox_112268312\demo\js\valde.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\H5-dash-hls-rtmp-webrtc_86879006\docs\MediaElement\build\mediaelement-and-player.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\H5-dash-hls-rtmp-webrtc_86879006\docs\MediaElement\build\mediaelement.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\H5-dash-hls-rtmp-webrtc_86879006\VideoDev-Hls\js\hls.light.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\habitat-lab_169164391\habitat-hitl\habitat_hitl\scripts\stub_client.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\hugo-theme-even_101626459\static\lib\js-sequence-diagrams\snap.svg-0.5.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\javascript_89748560\src\web-socket-handler.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javascript_89748560\src\web-socket-handler_test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\gotrace_53668532\page\js\leap.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\haikus-for-codespaces_365069809\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\graphql-zeus_197209898\packages\graphql-zeus-core\TreeToTS\functions\generated.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\graphql-zeus_197209898\packages\graphql-zeus-core\TreeToTS\functions\apiSubscription\legacy.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\jackblog-vue_51818825\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jackblog-vue_51818825\dist\29e74165.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hyper-express_355713473\tests\components\http\Request.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\home-assistant-config_221295919\custom_components\hacs\hacs_frontend\frontend_latest\3954.b5Xku5y1bDM.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\home-assistant-config_221295919\www\community\frigate-hass-card\live-go2rtc-0795a62f.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\home-assistant-config_221295919\www\community\frigate-hass-card\live-jsmpeg-9c767737.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\graphql-ws_283446239\src\client.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\graphql-ws_283446239\tests\utils\tclient.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\jor1k_7420521\demos\jor1k-master-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jor1k_7420521\js\master\utils.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jor1k_7420521\js\master\dev\ethernet.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\jor1k_7420521\js\worker\utils.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\GPTeam_623119055\src\web\templates\logs.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\js-data_23899906\latest\3.0.6\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\js-data_23899906\latest\3.0.6\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\goindex-theme-acrou_256266916\dist\js\chunk-40ad1794.9718f8ab.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hexo-theme-redefine_543339398\source\js\build\libs\pjax.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hexo-theme-redefine_543339398\source\js\libs\pjax.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hotelxoai.com_29781554\variant\js\init.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\JabbR_2292256\JabbR\Scripts\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jam_4373698\lib\github.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\jam_4373698\lib\utils.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\jeeplatform_89654412\code\jeeplatform-admin\src\main\webapp\plugins\page\js\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Hello-Java-Sec_382771445\src\main\resources\templates\jackson.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jquip_2810191\dist\jquip.ajax.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jquip_2810191\dist\jquip.all.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jquip_2810191\server\jquip.builder.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jquip_2810191\test\ajax\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jquip_2810191\test\ajax\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-fixtures.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jquip_2810191\test\ajax\node_modules\express\node_modules\connect\node_modules\formidable\tool\record.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jquip_2810191\test\ajax\node_modules\express\testing\foo\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\intergram_77236059\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\itranswarp.js_16679909\www\search\aliyun_search.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\itranswarp.js_16679909\www\static\js\vue-resource.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\house_135610584\static\src-min\socket.io.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Gracejs_50917994\middleware\proxy\lib\request.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\gsplat.js_713114206\src\wasm\data.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\gsplat.js_713114206\src\wasm\sort.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\joy_104183702\testdata\45-external-fetch\fetch\unfetch.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\joy_104183702\testdata\57-rewrite-file-dep\fetch\unfetch.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Hibernate-SpringBoot_152848908\SpringBootPayaraMySqlKickoffApplication\src\main\webapp\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\java-game-server_3351814\jetclient-js\src\jet-0.1.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\goindex_267868858\goindex-acrou\dist\js\chunk-40ad1794.9718f8ab.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\goindex_267868858\goindex-acrou\goindex-builder-code\dark\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\goindex_267868858\goindex-acrou\goindex-builder-code\light\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\lib\broadcast\broadcast.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\hook.io_9305769\lib\resources\broadcast.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\lib\web\web.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\hook.io_9305769\public\js\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\public\js\dropzone\min\dropzone-amd-module.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\public\js\dropzone\min\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\tests\websocket\ws-echo-test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\tests\websocket\wss-echo-test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\4\hook.io_9305769\view\stats.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\hook.io_9305769\view\account\billing\index.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\hook.io_9305769\view\hook\_rev.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\h5ds_107499650\src\h5ds-core\components\layers\text\components\loadText.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Graviton-App_162125552\web\src\services\clients\http.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\js-examples_79507074\promises-test\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\ipfs-deploy_170428113\src\pinners\pinata.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\example\json.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-fixtures.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-octet-stream.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\test\legacy\system\test-multi-video-upload.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\test\standalone\test-connection-aborted.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\express\node_modules\connect\node_modules\formidable\tool\record.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\ntwitter\node_modules\oauth\examples\express-gdata\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\sntp\test\index.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\socket.io\node_modules\policyfile\lib\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\socket.io\node_modules\policyfile\tests\unit.test.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\node_modules\twit\lib\twitter.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\node\public\js\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\public\js\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\vendor\assets\javascripts\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\vendor\assets\javascripts\howler1.1.7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jennifer_dewalt_8995733\vendor\assets\javascripts\lowLag.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\database-leak\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\express-node\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\idempotency\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\jspostgresweb\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\microservices-with-db\app\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\nginx-websockets\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\nginx-websockets-practice\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\postgresnode-pool\all.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\postgresnode-pool\old.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\postgresnode-pool\pool.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\samesite\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\sharding\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\sidecar2\log.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\sidecarlogging\logging.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\sqlinjection\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\tcp\tcp.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\tcp\udp.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\websocket-cell-game\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javascript_playground_173529836\zombie-cookie\zombie-cookie.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\hyper-fetch_420032474\packages\adapter-graphql\src\adapter\adapter.browser.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hyper-fetch_420032474\packages\core\src\adapter\adapter.browser.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\go-push_138113181\gateway\cli\client.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\4\javascript-risingstars_115159740\public\htmx.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Jalpc_59932776\static\assets\i18-20210315.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\Jalpc_59932776\static\js\i18next.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\jacman_17716945\source\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\4\hybrid_26557412\scripts\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\4\grunt-devtools_8402689\extension\src\js\devtools.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\jsPDF_402046\src\libs\FileSaver.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jsPDF_402046\test\utils\compare.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localForage_14003349\docs\localforage.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localForage_14003349\test\test.datatypes.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\learn-go-with-tests_123572362\websockets\v2\game.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\luigi_5888353\luigi\static\visualiser\lib\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\less.js_527644\dist\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\less.js_527644\packages\less\dist\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\Luckysheet_264125852\src\controllers\server.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\linaria_92112844\examples\vpssr-linaria-solid\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\listen1_chrome_extension_57430416\js\vendor\howler.core.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lifeRestart_396193750\public\libs\laya\worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lets-chat_3673976\media\js\vendor\socket.io\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\live2d-widget_140525341\dist\live2d.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\kutt_121380371\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\kutt_121380371\static\libs\htmx.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mediaelement_802006\build\mediaelement-and-player.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mediaelement_802006\build\mediaelement.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mediaelement_802006\build\mediaelement.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mediaelement_802006\build\renderers\youtube.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mediaelement_802006\src\js\utils\dom.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mihomo-party_836976013\src\main\core\mihomoApi.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\mist_37201011\tests\_base.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\docs-nodejs\async_hooks.html,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\docs-nodejs\child_process.html,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\docs-nodejs\cluster.html,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\docs-nodejs\dgram.html,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\docs-nodejs\repl.html,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\exercises\http_file_server\solution\solution.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\exercises\http_uppercaserer\solution\solution.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\exercises\time_server\solution\solution.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\test\http_file_server\valid_01.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\test\http_uppercaserer\invalid_02.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\test\http_uppercaserer\valid_01.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\learnyounode_11899155\test\time_server\valid_01.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\learning-area_53416555\javascript\apis\fetching-data\can-store-xhr\can-script.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\learning-area_53416555\tools-testing\cross-browser-testing\feature-detection\modernizr-custom.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\jss_25131304\examples\react-ssr\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\jss_25131304\scripts\create-github-release.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\5\maplibre-gl-js_319779344\src\util\ajax.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lighthouse-ci_180241820\packages\cli\test\fixtures\autorun-github\mock-github-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\lighthouse-ci_180241820\packages\cli\test\fixtures\puppeteer\auth-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\jsmpeg_9934117\jsmpeg.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\jsmpeg_9934117\websocket-relay.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\5\jsmpeg_9934117\src\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\KodExplorer_12594863\plugins\DPlayer\static\DPlayer\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\KodExplorer_12594863\plugins\DPlayer\static\DPlayer\lib\flv.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\KodExplorer_12594863\static\js\lib\util.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\log4js-node_475599\examples\example-connect-logger.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\log4js-node_475599\lib\appenders\multiprocess.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\log4js-node_475599\lib\appenders\tcp-server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\log4js-node_475599\test\tap\tcp-appender-test.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\metro_76504246\packages\metro\src\index.flow.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\5\maildev_9135204\app\components\socket.io\socket.io.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\kbone_195499749\packages\miniprogram-render\test\bom\xml-http-request.test.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mezzanine_692528\mezzanine\core\static\mezzanine\tinymce\plugins\imagetools\plugin.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\live-server_7166430\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\mianshiya_444443265\server\src\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\lsky-pro_152772568\public\js\blueimp-load-image\load-image.all.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mdui_63088743\packages\jq\src\functions\ajax.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MikuTools_173327259\utils\color-thief.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MikuTools_173327259\utils\libgif.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mail-for-good_67164440\client\actions\campaignActions.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mail-for-good_67164440\client\actions\listActions.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mail-for-good_67164440\client\actions\permissionActions.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\megaboilerplate_46940449\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\megaboilerplate_46940449\examples\express-handlebars-foundation-css-angularjs-gulp-mongodb-facebook-google\server.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\megaboilerplate_46940449\examples\express-jade-bootstrap-sass-mocha-mongodb-all-auth\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\megaboilerplate_46940449\examples\express-nunjucks-postcss-unstyled-react-webpack-mocha-sqlite-twitter\server.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\megaboilerplate_46940449\examples\express-nunjucks-postcss-unstyled-react-webpack-mocha-sqlite-twitter\controllers\user.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\MIDI.js_3457006\build\MIDI.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MIDI.js_3457006\build\MIDI.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MIDI.js_3457006\inc\tuna\tuna.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MIDI.js_3457006\js\midi\plugin.webaudio.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\MIDI.js_3457006\js\util\dom_request_xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\miniflare_369150691\packages\http-server\src\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\leetcode-cli_65799750\lib\plugin.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\5\learning-react_61668321\chapter-12\pets-next\.next\static\runtime\polyfills.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\M3U8-Downloader_229186778\static\lib\ckplayer\ckplayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\M3U8-Downloader_229186778\static\lib\Valine\av-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\M3U8-Downloader_229186778\static\lib\Valine\Valine.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lottery_168259404\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\lbry-desktop_79149882\static\webworkers\worker-bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lbry-desktop_79149882\static\webworkers\wasm-gen\libarchive.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lbry-desktop_79149882\ui\redux\actions\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\jsmind_5562943\js-legacy\jsmind.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mand-mobile_126504027\build\webpack\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\mand-mobile_126504027\site\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\makegirlsmoe_web_97284537\public\modules\webdnn\webdnn.es5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\makegirlsmoe_web_97284537\public\modules\webdnn\webdnn.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localResizeIMG_40428586\lrz.all.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localResizeIMG_40428586\lrz.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localResizeIMG_40428586\dist\lrz.all.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\localResizeIMG_40428586\dist\lrz.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\learn-to-send-email-via-google-script-html-no-server_44434384\form-submission-handler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lightproxy_230353730\vendor\whistle\lib\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\lightproxy_230353730\vendor\whistle\lib\plugins\load-plugin.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\lightproxy_230353730\vendor\whistle\test\index.test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\lightproxy_230353730\vendor\whistle\test\util.test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\lightproxy_230353730\vendor\whistle.scriptfile\lib\util.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\klipse_46494844\docs\repo\js\emscripten_module.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lida_611913815\lida\web\ui\polyfill-9f027554f9c426b688ff.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\miniPaint_11766620\src\js\libs\color-thief.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\LLamaSharp_638609341\LLama.Web\wwwroot\lib\signalr\signalr.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lulu_111541940\theme\edge\js\common\all.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lulu_111541940\theme\pure\js\common\all.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\laravel-echo-server_58835520\src\server.ts,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\jsonbox_206067456\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\keep-alive_749412659\Music_Free\xiaowo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\5\keep-alive_749412659\Music_Free\xiaoyun.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\custom-root-types.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\errors.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\loaders.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\routes.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\subscription-connection.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\mercurius_148332388\test\subscription-hooks.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\5\js_27620277\packages\espree\tests\fixtures\libraries\mootools-1.4.5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lighthousebot_85022121\builder\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\lighthousebot_85022121\frontend\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\mit-18.06-linalg-notes_104151666\asset\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jsonata_69357191\test\async-function.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\json4u_453847104\public\jq\1.7\jq.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\marble_132704094\benchmarks\middlewares.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\marble_132704094\benchmarks\routing.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\lawnchair_246773\util\serve.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\Matterwiki_65967168\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\laravel-filemanager_39873788\public\js\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lavas_92027496\packages\lavas-cli\src\lib\utils\checkUpdate.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\5\MathBox.js_6636672\build\MathBox.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\Laravel-Administrator_6659216\public\js\plupload\js\plupload.html5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\json-graphql-server_90272882\example\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\messaging-apis_90862638\packages\messaging-api-messenger\src\__tests__\MessengerClient.spec.ts,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\5\ko.javascript.info_159097215\5-network\11-websocket\chat.view\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\knox_916313\test\knox.test.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\5\media-source-extract_299553180\example\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\lemon_14370620\webapp\cdn\public\less\2.5.1\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\miniquad_229360531\js\gl.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\markdown-wasm_226783527\dist\markdown.es.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\markdown-wasm_226783527\dist\markdown.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\markdown-wasm_226783527\docs\markdown.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\knitserver_39306094\static\knitlib_js_client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\knitserver_39306094\static\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\loklak_tweetheatmap_49331753\public\lib\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\loklak_walls_61033249\iframely\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\loklak_walls_61033249\iframely\lib\core.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\loklak_walls_61033249\iframely\lib\request.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\loklak_walls_61033249\iframely\lib\utils.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\loklak_walls_61033249\oauth-proxy\api.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\JsRpc_410276606\resouces\JsEnv_Dev.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\lazyestload.js_143507997\gulpfile.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\5\kiwi.js_11436163\docs\files\src_file_File.ts.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\kiwi.js_11436163\src\file\File.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\limejs_1263177\lime\src\audio\audio.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\main_124626168\client\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\kityminder-core_25911141\dist\kityminder.core.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\kityminder-core_25911141\src\protocol\png.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\liebling_185054859\src\js\vendor\content-api.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\LangSrcCurise_203906135\ExtrApps\xadmin\static\xadmin\vendor\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\meu-primeiro-jogo-multiplayer_202632686\playground\implementacao-snake\src\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\maxurl_121688487\extension\background.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\maxurl_121688487\lib\fetch_shim.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\LumenIM_213125133\src\plugins\websocket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\local-npm_22590963\lib\index.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\malcom_10481405\Malcom\web\static\custom_js\sniffer_websockets.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\malcom_10481405\Malcom\web\static\d3js\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\malcom_10481405\Malcom\web\templates\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\Locker_1145302\lockerd.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Apps\4Me\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Apps\BloodPressureTracker\bptracker.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Apps\dashboardv3\dashboard-client.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Apps\LongCal\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Contacts\contacts.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Contacts\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Links\api.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Links\dataIn.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Links\links.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Links\longus.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Links\oembed.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Photos\dataIn.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Photos\photos.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Places\places.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Places\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Search\search.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Collections\Search\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\levents.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\lfs.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\locker.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\lscheduler.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\lutil.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\app\static.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Common\node\connector\oauth2.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\BodyMedia\auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\Flickr\photos.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\foursquare\badges.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\foursquare\checkins.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\foursquare\friends.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\foursquare\recent.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\GitHub\events.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\GitHub\repos.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\GitHub\userEvents.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\GoogleDocuments\changes.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\GooglePlus\lib.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\LinkedIn\auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\Netflix\auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\Rdio\auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\SMTP\smtp.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\Withings\auth.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\WorkInProgress\GoodReads\client.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\WorkInProgress\IMAP\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\WorkInProgress\Twitpic\twitpic.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\WorkInProgress\TwitterSearch\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Connectors\WorkInProgress\Wakemate\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\migrations\0000000000005.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\migrations\0000000000006.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\migrations\0000000000007.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Ops\publish.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\5\Locker_1145302\Ops\registry.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\Ops\webservice.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\collection-contacts-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\collection-links-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\collection-photos-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\collection-places-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\locker-client-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\locker-core-api-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\lpushmanager-test-local.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\lscheduler-test-local.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\lservicemanager-test-local.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\lsyncmanager-test-local.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\test-utils.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\contacts\0.0.2\package\contacts.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\contacts\0.0.2\package\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\flickr\0.0.5\package\photos.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\instagram\0.0.4\package\client.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\links\0.0.4\package\dataIn.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\links\0.0.4\package\links.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\links\0.0.4\package\longus.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\links\0.0.4\package\oembed.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\photos\0.0.2\package\dataStore.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\photos\0.0.2\package\photos.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\places\0.0.2\package\dataStore.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\places\0.0.2\package\places.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\places\0.0.2\package\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\search\0.0.2\package\search.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\.npm\search\0.0.2\package\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\instagram\client.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\links\dataIn.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\links\links.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\links\longus.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\links\oembed.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\photos\dataStore.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\photos\photos.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\places\dataStore.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\places\places.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\places\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\search\search.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Locker_1145302\tests\Data.tests\node_modules\search\sync.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\mbtaviz.github.io_18912241\bower_components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\mbtaviz.github.io_18912241\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jsPsych_4340323\docs\demos\js\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jsPsych_4340323\examples\js\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jsPsych_4340323\packages\jspsych\src\modules\plugin-api\MediaAPI.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\Meteor-CollectionFS_7455107\packages\data-man\client\data-man-api.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\Meteor-CollectionFS_7455107\packages\data-man\server\data-man-url.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\Macro-Deck_166713531\MacroDeck\wwwroot\client\polyfills-core-js.d194a15ffc2eb321.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\marksheet_38218783\javascript\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\magenta-studio_155950857\magenta4live.amxd\code\magenta-index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\5\Loon-Gallery_491005227\backend\gallery.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\5\launcher_151470271\src\main\LogsWindow.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\Live2D_112846468\live2d\js\live2d.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\jstack_851513974\packages\jstack-shared\src\socket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\5\kandan_3639793\app\assets\javascripts\lib\jquery.filedrop.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\aead_aes256gcm2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\aead_chacha20poly1305.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\aead_chacha20poly13052.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\aead_xchacha20poly1305.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth6.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\auth7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box_easy.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\box_seed.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\chacha20.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\codecs.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core1.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core6.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\core_ed25519.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\ed25519_convert.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\generichash2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\generichash3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\hash.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\hash3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\kdf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\kdf_hkdf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\keygen.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\metamorphic.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\misuse.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\onetimeauth.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\onetimeauth2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\onetimeauth7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\pwhash_argon2i.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\pwhash_argon2id.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\pwhash_scrypt.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\pwhash_scrypt_ll.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\randombytes.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult6.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\scalarmult_ed25519.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox_easy.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretbox_easy2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\secretstream_xchacha20poly1305.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\shorthash.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\siphashx24.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\sodium_core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\sodium_utils.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\sodium_version.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\stream.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\stream2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\stream3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\stream4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\5\libsodium.js_29293352\browsers-test\verify1.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mongoose_597879\scripts\loadSponsorData.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\ngrok_8900723\assets\client\static\js\ngrok.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\parse-server_50603846\spec\HTTPRequest.spec.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\parse-server_50603846\spec\index.spec.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\parse-server_50603846\spec\ParseLiveQueryServer.spec.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\parse-server_50603846\spec\ParseWebSocketServer.spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\parse-server_50603846\src\ParseServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\packages\node_modules\@node-red\editor-client\src\js\comms.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-red_12618379\packages\node_modules\@node-red\nodes\core\network\31-tcpin.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\packages\node_modules\@node-red\runtime\lib\storage\localfilesystem\projects\git\authServer.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\packages\node_modules\node-red\red.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\editor\editor_helper.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\nodes\core\common\21-debug_spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\nodes\core\network\21-httprequest_spec.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\nodes\core\network\31-tcpin_spec.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\nodes\core\network\31-tcprequest_spec.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\nodes\core\network\32-udpout_spec.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\unit\@node-red\editor-api\lib\editor\comms_spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\node-red_12618379\test\unit\@node-red\runtime\lib\storage\localfilesystem\projects\git\authWriter_spec.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\nightmare_18477927\test\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodemailer_1272424\test\fetch\nmfetch-test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\nodemailer_1272424\test\mime-node\mime-node-test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\nodemailer_1272424\test\shared\shared-test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.client.send.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.clients.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.intercept.client.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.intercept.server.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.logging.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.server.connect.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\browser\ws-api\ws.use.browser.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\ws.event-patching.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\ws.intercept.client.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\ws.server.connect.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\ws.stop-propagation.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\ws.use.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\on-unhandled-request\callback.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\on-unhandled-request\error.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\msw_157397583\test\node\ws-api\on-unhandled-request\warn.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\N-blog_10309334\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\paper.js_1338813\examples\Paperjs.org\SatieLikedToDraw.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nedb_9795883\browser-version\out\nedb.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mui_23062124\examples\login\libs\easymob-webim-sdk\strophe-custom-2.0.0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\partytown_398349583\tests\integrations\hubspot\banner-20632911.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\partytown_398349583\tests\integrations\hubspot\collectedforms.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\partytown_398349583\tests\integrations\intercom\vendor-modern.d054d6ff.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\nock_2436267\tests\got\test_intercept.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\node-inspector_781028\front-end\sdk\InspectorBackend.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-inspector_781028\lib\debug-server.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\PapaParse_13395052\papaparse.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\peerjs_7292898\lib\socket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg\test\integration\client\connection-timeout-tests.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg\test\integration\client\network-partition-tests.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg\test\integration\gh-issues\2079-tests.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg\test\integration\gh-issues\3174-tests.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg\test\unit\connection\error-tests.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-postgres_991475\packages\pg-pool\test\connection-timeout.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-elm_85816528\public\elm\static\js\app.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phabricator_1280180\support\aphlict\server\lib\AphlictClientServer.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\6\phabricator_1280180\webroot\rsrc\externals\javelin\lib\WebSocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\pdfmake_16107755\dev-playground\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\pdfmake_16107755\src\browser-extensions\URLBrowserResolver.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\ndb_141745951\services\ndd_service.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\2.2\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\2.2\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.0\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.0\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.1\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.1\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.2\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.2\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.3\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.3\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.4\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.4\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.5\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.5\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.6\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.6\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.7\api\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\docs\3.7\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-mongodb-native_462292\test\tools\mongodb-mock\src\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\pdfkit_2030956\examples\webpack\src\httpHelpers.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\Parsley.js_7191565\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\php-code-coverage_212659\src\Report\Html\Renderer\Template\js\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\MQTT.js_1569980\examples\ws\aedes_server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\6\nunjucks_5351666\docs\bower_components\bootstrap\assets\js\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nunjucks_5351666\docs\bower_components\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nebular_104188467\src\backend\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-fluent-ffmpeg_1602811\examples\express-stream.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\pdfs_20868768\Inside IO Completion Ports_files\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\overreacted.io_159876616\watcher.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\overreacted.io_159876616\app\AutoRefresh.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\nanohttpd_5374914\websocket\src\test\resources\echo-test.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\newman_17449493\npm\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-config_1130565\tools\contributors.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\moleculer_82289483\src\transporters\tcp\tcp-reader.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\moleculer_82289483\test\unit\transporters\tcp\tcp-reader.spec.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\moon_63303358\packages\moon\dist\moon.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\moon_63303358\packages\moon-browser\dist\moon-browser.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nbnhhsh_249092249\nbnhhsh.user.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-notifier_6965529\lib\utils.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\orillusion_613977151\packages\draco\draco_wasm_wrapper_gltf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\orillusion_613977151\packages\wasm-matrix\matrix.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\notion-sdk-js_359022072\examples\web-form-with-express\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\opal_184366\lib\opal\cli_runners\node_modules\chrome-remote-interface\lib\chrome.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\opal_184366\lib\opal\cli_runners\node_modules\chrome-remote-interface\lib\websocket-wrapper.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\Orca_121553439\desktop\sources\scripts\core\io\udp.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\6\Orca_121553439\resources\listener.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\6\peerjs-server_7452705\__test__\services\webSocketServer\index.spec.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\natpass_390982669\html\shell\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\natpass_390982669\html\vnc\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\NeMo-Guardrails_629494390\chat-ui\frontend\_next\static\chunks\polyfills-c67a75d1b6f99dc8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nodebeginner.org_1618145\blog\post\nodejs-tutorial-how-to-work-with-websockets\index.html,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodebeginner.org_1618145\blog\post\nodejs-tutorial-optimizing-code-performance-using-async\index.html,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\classic.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\flatcard.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\nchyn_grey.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\new_onedrive.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\onemoe.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\OneManager-php_230926110\theme\tfo.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mpush_57261362\mpush-core\src\main\resources\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\openv0_693743670\server\api.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\01-node-tutorial\17-http-stream.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\02-express-tutorial\final\03-express-basics.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\02-express-tutorial\final\04-express-app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\02-express-tutorial\final\09-middleware-use.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\02-express-tutorial\final\10-middleware-options.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\02-express-tutorial\final\11-methods.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\04-store-api\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\06-jobs-api\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\06-jobs-api\starter\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\06.5-jobster-api\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\06.5-jobster-api\starter\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\07-file-upload\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\08-send-email\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\08-send-email\starter\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-express-course_338102540\09-stripe-payment\final\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\patchwork_37995048\lib\app\sync\external-handler\git.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-html-pdf_18917566\examples\serve-http\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\netty-learning_12939200\netty-3.7\src\test\resources\websocketx\html5\js\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\my-room-in-3d_393666962\static\basis\basis_transcoder.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mp-html_181125174\docs\lib\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\nodejs-integration-tests-best-practices_291930234\example-application\business-logic\order-service.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\examples\express-all-interactions\server.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\examples\greet-and-react\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\examples\oauth-v1\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\examples\oauth-v2\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\packages\rtm-api\test\integration.spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\node-slack-sdk_18117991\packages\socket-mode\test\integration.spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\morphdom_38078509\examples\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\OSXAuditor_10801048\d3-3.2.8\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\Oimo.js_13634772\examples\js\libs\sea3d.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\Musish_159973040\src\backend\appleMusicApi.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\Musish_159973040\src\backend\genius\artist.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\nodejs-basics_192476541\jwt-authentication\authServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodejs-basics_192476541\jwt-authentication\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodejs-basics_192476541\node-jwt-mysql-auth\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodejs-basics_192476541\nodejs-basics\net-server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\nodejs-basics_192476541\nodejs-basics\play-video.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\client-test.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\express-server-test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\request-no-envelope-body-test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\server-compress-test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\server-options-test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\server-response-event-test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-soap_1584707\test\server-style-mix-test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\Photon_133619330\src\renderer\utils\jsonrpc.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\page-skeleton-webpack-plugin_127401585\src\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\examples\opentelemetry-web\examples\fetchXhr\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\examples\opentelemetry-web\examples\fetchXhrB3\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\examples\opentelemetry-web\examples\xml-http-request\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\experimental\packages\otlp-exporter-base\src\transport\xhr-transport.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\integration-tests\propagation-validation-server\validation-server.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\packages\opentelemetry-exporter-zipkin\src\platform\browser\util.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\opentelemetry-js_185901023\selenium-tests\pages\xhr\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\oicq_285180832\test\core.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\6\openai-scf-proxy_610110374\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Nexterm_842102124\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Nexterm_842102124\server\controllers\appSource.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\Nexterm_842102124\server\routes\pveLXC.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\Nexterm_842102124\server\utils\pveUpdater.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\oidc-client-js_31633215\samples\VanillaJS\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\mpld3_15271042\mpld3\js\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mStream_47475095\src\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\mStream_47475095\src\api\remote.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\mStream_47475095\src\db\scanner.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\mStream_47475095\src\state\syncthing.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\mStream_47475095\src\unused\ddns.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\mStream_47475095\webapp\assets\js\mstream.jukebox.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\mStream_47475095\webapp\assets\js\lib\dropzone.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\New-Bing-Anywhere_614826827\src\app\src\apis\_bing\utils.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\New-Bing-Anywhere_614826827\src\background\listeners\_bing.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-wit_56077169\examples\messenger.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\mp4box.js_19062997\test\qunit-helper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mp4box.js_19062997\test\segment-player.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\openbooks_186865523\server\app\src\state\socketMiddleware.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-feedparser_2392967\examples\complete.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\OldTweetDeck_679483163\src\interception.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\ng2-file-upload_41478768\libs\ng2-file-upload\file-upload\file-uploader.class.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\monitor_281088983\examples\JS\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\monitor_281088983\examples\Vue\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\netty-4-user-guide-demos_30628859\netty4-demos\src\main\resources\WebsocketChatClient.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\NudeNet_173154449\in_browser\src\utils\download.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mpegts.js_347860608\src\io\xhr-moz-chunked-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mpegts.js_347860608\src\io\xhr-msstream-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\mpegts.js_347860608\src\io\xhr-range-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\persona_1578548\scripts\serve_example.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\persona_1578548\scripts\serve_example_primary.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\persona_1578548\tests\cef-logging.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\6\phaser-ce-examples_17645158\examples\wip\afm\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phaser-ce-examples_17645158\examples\wip\misc\pt.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phaser-ce-examples_17645158\examples\_plugins\ProTracker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phaser-ce-examples_17645158\examples\_site\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\movim_37983532\public\scripts\movim_websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\observability-zero-to-hero_614899368\day-4\application\service-a\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\observability-zero-to-hero_614899368\day-4\application\service-b\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Pathfinding-Visualizer_73746450\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\pact-js_60344592\examples\v4\matchers\provider.spec.ts,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\needle_2956541\examples\stream-multiple\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\needle_2956541\test\compression_spec.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\needle_2956541\test\output_spec.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\needle_2956541\test\response_stream_spec.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\nodejs-fullstack_53288261\plugin\leap\leap.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\nodejs-fullstack_53288261\plugin\multiplex\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nodejs-fullstack_53288261\plugin\notes-server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api2_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api3_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api5_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api6_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api7_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\example_api_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\openapi-to-graphql_147564967\packages\openapi-to-graphql\test\file_upload_api_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-images_8391910\demo\uploadServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\nats.node_3043048\test\basics.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\oauthd_11617180\src\presentationLayer\sdk\js_sdk\oauth.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\open-event-scraper_50897577\web\hook.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\muffon_305726784\src\mixins\socketMixin.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\nohost_223688419\lib\plugins\whistle.nohost\lib\util.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\nohost_223688419\packages\tools\router\test\proxy.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\mobilebone_25571625\dist\mobilebone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\node-escpos_41595512\examples\web\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Parse-SDK-JS_42541957\src\LiveQueryClient.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\peerflix-server_18464687\server\engine.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-toobusy_6724411\examples\express.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\NeteaseMusic_190337364\src\assets\utils\download.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\NativeWebSocket_200769444\NodeServer\index.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\6\ol-ext_41598176\doc\doc-pages\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\ol-ext_41598176\src\source\Geoportail.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\ol-ext_41598176\src\util\Ajax.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\ol-ext_41598176\src\util\imagesLoader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\Neurite_624122214\localhost_servers\ai-proxy\ai-proxy.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\Neurite_624122214\localhost_servers\direct-access\direct-access.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Neurite_624122214\localhost_servers\webscrape\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\Neurite_624122214\localhost_servers\wiki-search\novelty.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\PandoraNext-TokensTool_720010338\rearServer\src\main\resources\static\js\154.a30ad9b8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\PandoraNext-TokensTool_720010338\rearServer\target\classes\static\js\154.a30ad9b8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\npm-stat.com_5935740\src\main\resources\static\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\networked-aframe_79324058\dist\networked-aframe.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\networked-aframe_79324058\server\easyrtc-server.js,Inter-Process Communication (IPC),92,JavaScript*,WebSocket Server-side based on socket.io in JavaScript,"['Step 1: Import the necessary modules (http and socket.io).', 'Step 2: Create an HTTP server to handle incoming requests.', 'Step 3: Bind socket.io to the HTTP server for WebSocket communication.', ""Step 4: Set up event listeners for 'connection','message', 'disconnect' events and start the server.""]"
D:\CAE\Splited_Repository\6\networked-aframe_79324058\server\socketio-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\example\json.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-fixtures.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\test\integration\test-octet-stream.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\test\legacy\system\test-multi-video-upload.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\test\standalone\test-connection-aborted.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\express\node_modules\connect\node_modules\formidable\tool\record.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\socket.io\node_modules\policyfile\lib\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\socket.io\node_modules\policyfile\tests\unit.test.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws\examples\fileapi\public\uploader.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\N-chat_11168449\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws\test\WebSocket.test.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\paho.mqtt.javascript_48129898\src\test\client-harness.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\morphos_701961515\static\htmx.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\node-js-getting-started_19874820\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\mongoosastic_25697973\example\blog\javascript\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\noisecraft_370396971\public\browse.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\noisecraft_370396971\public\session.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\noisecraft_370396971\public\sharing.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\obsidian-outliner_350369033\jest\global-setup.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\6\obsidian-outliner_350369033\jest\obsidian-environment.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\algorithm\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\application\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\collections\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\commands\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\coreutils\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\datastore\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\disposable\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\domutils\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\dragdrop\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\keyboard\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\messaging\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\properties\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\signaling\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\virtualdom\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\phosphor_31988820\docs\api\widgets\assets\js\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\obsidian-advanced-slides_436176544\docs\themes\docdock\static\revealjs\plugin\multiplex\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\obsidian-advanced-slides_436176544\docs\themes\docdock\static\revealjs\plugin\notes-server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\apiBittrex.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\apiCoinWarz.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\apiCryptsy.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\apiMintpal.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\apiPoloniex.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\cliListener.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\6\node-open-mining-portal_15887579\libs\website.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\old-docs-site_7804910\app\summit-2015\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\old-docs-site_7804910\app\summit-2016\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\morgue_13639712\features\upload\assets\js\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\controller\node.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\integrations\gotify.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\integrations\healthChecks.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\integrations\pushover.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\integrations\webhook.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\routes\system.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\myspeed_478222232\server\util\loadServers.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\6\node-red-nodes_13133024\hardware\sensehatsim\public\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\6\openwebrx_27281931\htdocs\openwebrx.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\react-three-fiber_172521926\packages\fiber\src\native\polyfills.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-api.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-body.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-gzip.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-onelineproxy.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-piped-redirect.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-pipes.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-proxy-connect.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-stream.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\test-tunnel.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\request_1283503\tests\browser\start.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\proxyee-down_108252892\main\src\main\resources\extension\runtime.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\redoc_45250726\demo\ssr\index.ts,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\component\test.deletion_error.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\component\test.read_only_replication.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\component\test.replication_perf_regression.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\integration\deps\pouchdb-1.1.0-postfixed.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\integration\deps\pouchdb-2.2.0-postfixed.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\integration\deps\pouchdb-3.2.0-postfixed.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pouchdb_714074\tests\integration\deps\pouchdb-3.6.0-postfixed.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-demos_32726377\demo13\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\react-demos_32726377\demo13\src\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\ratchet_5448530\dist\js\ratchet.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\ratchet_5448530\docs\dist\js\ratchet.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\extension\examples\counter\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\extension\examples\router\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\extension\examples\todomvc\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\packages\redux-devtools-remote\examples\counter\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\packages\redux-devtools-remote\examples\router\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\packages\redux-devtools-remote\examples\todomvc\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools_38565895\packages\redux-devtools-remote\examples\toggle-monitoring\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools-extension_44869078\examples\counter\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools-extension_44869078\examples\router\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\redux-devtools-extension_44869078\examples\todomvc\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pomelo_5880912\lib\connectors\udpconnector.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\pomelo_5880912\lib\connectors\hybrid\wsprocessor.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\7\pomelo_5880912\template\web-server\public\js\lib\socket.io.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pomelo_5880912\template\web-server\public\js\lib\build\build.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\razzle_51462299\packages\create-razzle-app\lib\utils\load-example.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\razzle_51462299\packages\create-razzle-app\lib\utils\load-github-example.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\razzle_51462299\packages\razzle-dev-utils\webpackHotDevClientV4.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\razzle_51462299\test\examples\isomorphic-examples.test.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\reactide_84232645\lib\new-project-template\new-project\node_modules\http-proxy-middleware\examples\websocket\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\reactide_84232645\lib\new-project-template\new-project\node_modules\http-proxy-middleware\test\e2e\websocket.spec.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\7\reactide_84232645\lib\new-project-template\new-project\node_modules\sockjs-client\node_modules\faye-websocket\examples\autobahn_client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\reactide_84232645\lib\new-project-template\new-project\node_modules\sockjs-client\node_modules\faye-websocket\examples\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\reactide_84232645\lib\new-project-template\new-project\node_modules\sockjs-client\node_modules\faye-websocket\examples\server.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\react-native-debugger_59966901\app\middlewares\debuggerAPI.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\react-native-debugger_59966901\app\worker\polyfills\fetch.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pollyjs_135633158\packages\@pollyjs\adapter-xhr\tests\utils\xhr-request.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-toolbox_36376183\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-toolbox_36376183\docs\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-tetris_76954504\src\unit\music.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\reactpy_171410703\src\js\packages\@reactpy\client\src\reactpy-client.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\pinyin_802229\tools\robot-zdic-zi.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\pinyin_802229\tools\robot-zi.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\py_47042287\DataScience\CelebrityFaceRecognition\UI\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-draft-wysiwyg_67361765\docs\config\server.dev.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.1.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.10.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.10.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.10.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.10.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.10.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.2.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.2.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.3.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.3.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.3.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.5__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.4.6__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.5.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.5.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.5.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.5.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.5.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.6.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.6.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.6.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.6.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.7.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.7.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.7.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.7.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.7.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.10__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.5__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.6__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.7__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.8__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.8.9__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.0__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.1__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.2__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.3__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.4__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.5__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.6__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__dojo__1.9.7__dojo__dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__ext-core__3.0.0__ext-core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__ext-core__3.1.0__ext-core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__1.2.3__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__1.2.6__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__1.3.0__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__1.3.1__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__1.3.2__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__2.0.0__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__2.0.1__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__2.0.2__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__jquery__2.0.3__jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poisontap_73915307\js\ajax.googleapis.com__ajax__libs__spf__2.3.0__spf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\ponzu_68429735\docs\build\assets\javascripts\application-6b599127bc.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\plupload_467461\js\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\plupload_467461\js\plupload.full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\clock_in.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\eval_script.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\jd_price.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\jd_price_lite.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\nf_rating.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\nf_rating_season.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\tb_price.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\tb_price_lite.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\QuantumultX_290135452\yichahucha\tool.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\react-router-tutorial_51420370\lessons\12-navigating\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-router-tutorial_51420370\lessons\13-server-rendering\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pts_86075041\dist\pts.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pts_86075041\src\Play.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\quaggaJS_23613565\dist\quagga.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\quaggaJS_23613565\src\input\exif_helper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-snap_105412971\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-snap_105412971\tests\examples\cra\static\js\main.42105999.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pix2pix-tensorflow_79950107\server\static\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\Pluto.jl_242439725\frontend\common\PlutoConnection.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\arctic-sunset\arctic-sunset-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\chubby-stacks\chubby-stacks-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\city-break\city-break-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\dark-velvet\dark-velvet-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\funky-tunes\funky-tunes-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\metro-vibes\metro-vibes-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\modern-touch\modern-touch-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\skinny-frames\skinny-frames-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\sweet-candy\sweet-candy-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PixelKit-Bootstrap-UI-Kits_13863797\vanilla-cream\vanilla-cream-less\js\libs\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\resumable.js_2003404\resumable.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\resumable.js_2003404\samples\coffeescript\resumable.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\resumable.js_2003404\samples\java\src\main\webapp\resumable.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\resumable.js_2003404\samples\Node.js\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\Resemble.js_8336642\demoassets\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\primus_10932532\examples\authorization\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\primus_10932532\examples\echo\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\primus_10932532\examples\events\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\primus_10932532\examples\middleware\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\primus_10932532\issues\110\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\primus_10932532\test\common.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\primus_10932532\test\primus.test.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\primus_10932532\transformers\engine.io\library.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\redbird_22644637\test\register.spec.ts,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\project_chat_application_205004754\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-hot-boilerplate_23260742\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pikachu_142127816\assets\js\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\rack-mini-profiler_12656803\lib\html\includes.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\retire.js_12496161\firefox\test\web\dojo.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-transform-boilerplate_41835935\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-ideal-image_134180888\src\components\unfetch.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-native-dom_112388519\packages\react-native-dom\ReactDom\bridge\RCTBridge.worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\reactjs_koans_34921511\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\Remotery_17664381\vis\Code\WebSocketConnection.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\processing-js_1282929\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\RedisLive_4603467\src\www\js\libs\less\less-1.3.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pwa_84165522\template\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\reqwest_1557647\reqwest.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-flexbox-grid_46259702\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-flexbox-grid_46259702\doc\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\PreloadJS_3506930\lib\preloadjs-NEXT.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PreloadJS_3506930\lib\preloadjs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PreloadJS_3506930\tests\tasks\findopenport.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\PreloadJS_3506930\_assets\libs\soundjs-NEXT.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-templates_26432432\playground\libs\requirejs-plugins\text.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-paginate_24233213\demo\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-native-fetch-blob_58052865\lib\oboe-browser.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-figma_201732237\src\helpers\connectToDevTools.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\readability_3856601\src\readability.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\react-complete-guide-course-resources_691567688\attachments\30 React Summary\dummy-backend\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-complete-guide-course-resources_691567688\code\30 React Summary\21-finished\backend\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-notification-system_35157449\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-monocle_61919271\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\Proton_11303194\example\lib\preloadjs-0.6.2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pitaya_125911051\examples\demo\chat\web\starx-wsclient.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\react-render-tracker_389568562\examples\demo-app\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-render-tracker_389568562\scripts\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\ReactJS-AdminLTE_43410867\public\plugins\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\remotestorage.js_1052694\src\requests.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\playwright-go_287942241\tests\assets\modernizr.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\RealtimeSTT_684718636\example_browserclient\client.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\RealtimeSTT_684718636\RealtimeSTT_server\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\Resources_563600239\Loon\Spotify\Test\Spotify_proto.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\SubZero.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\TBPrice.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\Ximalaya.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\Bilibili\JBBilibili.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\JD\JdPrice.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Script\JD\JDPriceLite.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\Resources_563600239\Sub-Store\sub-store-0.min.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\pinball_462900266\web\__\firebase\8.10.1\firebase-auth.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\async\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\counter\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\real-world\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\shopping-cart\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\todomvc\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-examples\todos-with-undo\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-tutorial_49178942\redux-undo-boilerplate\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-starter_22472365\lib\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\babycare.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\fenxiang.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\fsdlb.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\guolejiangjiu.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\hl.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\hyjk.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\lenovoapp.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\maisiweier.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\zhiwuxingqiu.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\kfh\kfh.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\wxapp\qfxsh.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\wxapp\wx_xlxyh.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\wxapp\yeyebupaocha.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\wxapp\zippo.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\QLScriptPublic_574012459\wxapp\杰士邦安心福利社.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\Pile_704955726\src\main\utils\linkPreview.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\Pile_704955726\src\main\utils\pileEmbeddings.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\pusher-js_617902\dist\web\sockjs.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pusher-js_617902\dist\web\sockjs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pusher-js_617902\integration_tests_server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pixyll_15641094\_includes\ajaxify_content_form.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pico_248884319\test\server.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\phphub5_63073314\public\packages\summerblue\administrator\js\plupload\js\plupload.html5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\phphub5_63073314\resources\assets\js\vendor\inline-attachment.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PPet_231632277\src\renderer\public\scripts\live2d.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-demo_64744682\build\dev.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-project_52410553\create-react-project\blueprint\static\fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\plugins_14101953\AppStore\static\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\plugins_14101953\Contribute\plugins\Contribute\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\PokemonGo-DesktopMap_63730796\app\login.html,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\7\PokemonGo-DesktopMap_63730796\app\main.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-d3_25973357\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\pythagora_591742672\src\bin\postinstall.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\pythagora_591742672\src\helpers\redis.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\pythagora_591742672\src\utils\common.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\piral_170884642\src\utilities\piral-debug-utils\src\emulator.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\quick_redis_blog_266660261\src\services\RedisService.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\react-ui_32306488\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-ui_32306488\cli\devServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-ui_32306488\test\testServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\rats-search_119388337\src\background\p2p.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\rats-search_119388337\src\background\portCheck.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\rats-search_119388337\src\background\bt\udp-tracker-request.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\7\python-react_27406686\examples\basic_rendering\render_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\python-react_27406686\examples\frontend-rendering-with-webpack\render_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\python-react_27406686\examples\Tornado-example\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\python-react_27406686\tests\test_server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\php-mpos_9885864\public\site_assets\bootstrap\js\plugins\soundjs-0.6.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\QZoneExport_174860332\src\js\background.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\QZoneExport_174860332\src\vendor\FileSaver\FileSaver.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\rabbit.js_949801\example\ordering\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\7\rabbit.js_949801\example\sockjs\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\7\project_medical_pager_chat_401122616\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\reactable_18999697\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\React-Redux-Flask_51275191\static\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\read-aloud_70820054\docs\js\readaloud.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\read-aloud_70820054\js\peerjs.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\QQMusicApi_209230778\docs\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\QQMusicApi_209230778\util\request.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\7\php-simple-html-dom-parser_7192354\Src\Sunra\PhpSimple\simplehtmldom_1_5\app\js\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\responsive-elements_12849657\website\media\css3-mediaqueries.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\react-csv_74758476\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\python-websocket-server_26865957\client.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\phpquery_1762414\jQueryServer\demo\jquery.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\pods_1570020\components\Migrate-Packages\js\FileSaver.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\polyfills_1331715\EventSource.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\7\poxa_10395784\priv\static\js\console.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\ProjectRTC_11903470\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\readable-stream_5187096\test\parallel\test-stream-finished.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\7\pinafore_116539127\src\routes\_api\stream\TimelineStream.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\pinafore_116539127\src\routes\_thirdparty\websocket\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\7\polyfill-library_762719221\test\polyfills\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\React-Dropzone-Component_35572778\example\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\7\react-redux-starter-kit_40981536\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\Rocket_54168759\examples\upgrade\static\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RxJS_3122202\examples\assets\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\snapdrop_48242990\client\scripts\network.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\snapdrop_48242990\server\index.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V1\server\game\src\project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V1\under_construction\assets\scripts\Controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V1\web_code\assets\script\Controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V1\web_code\library\bundle.project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V2\client\assets\scripts\Controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V2\server\game\src\project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V3\client\assets\script\controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V3\server\game\src\project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4\s2p_v4_client\assets\Script\controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4\s2p_v4_client\assets\Script\faceSelector.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4\s2p_v4_client\assets\Script\ImageLoader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4\s2p_v4_server\game\src\project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4.5\s2p_v45_client\assets\Script\controller.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4.5\s2p_v45_client\assets\Script\faceSelector.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4.5\s2p_v45_client\assets\Script\ImageLoader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\style2paints_93354260\V4.5\s2p_v45_server\game\src\project.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\statsd_1207300\servers\tcp.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\superagent_1607357\src\node\index.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\8\superagent_1607357\test\node\pipe.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\8\superagent_1607357\test\node\query.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\8\springboot-learning-example_81057842\springboot-webflux-8-websocket\src\main\resources\websocket-client.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\SingleFile_906022\lib\single-file-background.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\SingleFile_906022\lib\single-file-extension-background.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\SingleFile_906022\lib\single-file-extension-bootstrap.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\SingleFile_906022\lib\single-file-zip.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ScrollMagic_13030144\dev\docs\template\static\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ScrollMagic_13030144\docs\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\store.js_743723\scripts\saucelabs\saucelabs-api.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\store.js_743723\scripts\saucelabs\tunnel.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\Snap.svg_12143585\demos\animated-game\js\snap.svg.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Snap.svg_12143585\demos\snap-ad\src\js\vendor\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Snap.svg_12143585\demos\snap-ad\src\js\vendor\snap.svg.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Snap.svg_12143585\dist\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Snap.svg_12143585\src\svg.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\app\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\auth\ldap.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\auth\mock.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\auth\saml2.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\auth\oauth2\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\device\plugins\screen\stream.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\device\plugins\vnc\index.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\poorxy\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\storage\s3.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\storage\temp.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\storage\plugins\apk\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\stf_37834277\lib\units\storage\plugins\image\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\stf_37834277\res\app\components\stf\screen\screen-directive.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\screenity_309123651\build\assets\selfieSegmentation\selfie_segmentation_solution_simd_wasm_bin.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screenity_309123651\build\assets\selfieSegmentation\selfie_segmentation_solution_wasm_bin.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screenity_309123651\build\assets\vendor\ffmpeg-core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screenity_309123651\src\assets\vendor\ffmpeg-core.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\server_117591846\ui\src\message\WebSocketStore.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\Script_198484358\Bilibili-DailyBonus\ExchangePoints.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\Script_198484358\Disney\DisneyRating.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\Script_198484358\iQIYI-DailyBonus\iQIYI.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\Script_198484358\JD-DailyBonus\JD_DailyBonus.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\Stock-Prediction-Models_114629751\stock-forecasting-js\js\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Stock-Prediction-Models_114629751\stock-forecasting-js\js\papaparse.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\simpread_76822722\src\vender\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\server_280232135\ui\src\useRoom.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\satellizer_21486287\examples\server\node\server.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\spy-debugger_49316177\buildin_modules\weinre\lib\weinre.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\spy-debugger_49316177\buildin_modules\weinre\web\client\inspector.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\spy-debugger_49316177\buildin_modules\weinre\web\target\target-script.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\staticrypt_89785877\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\staticrypt_89785877\scripts\index_template.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Sigma-Web-Dev-Course_696990839\Video 130\passop-mongo\backend\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\Sigma-Web-Dev-Course_696990839\Video 88\main.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\Sigma-Web-Dev-Course_696990839\Video 89\main.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\Sigma-Web-Dev-Course_696990839\Video 90\main.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\counter\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\counter-json1\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\leaderboard\server\index.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\rich-text\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\rich-text-presence\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\sharedb_9156525\examples\textarea\server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\socketcluster_13034860\app\public\socketcluster-client.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\Snap.js_9158654\demo\apps\ratchet\ratchet.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ssh2_5283193\lib\protocol\crypto\poly1305.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ssh2_5283193\test\test-misc-client-server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\sinopia_10214540\lib\up-storage.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\simpl_5291075\mse\audio\js\gapless.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\simpl_5291075\search\pouchdb\js\lib\pouchdb-6.3.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\simpl_5291075\search\shakespeare\pouchdb\js\lib\pouchdb-6.3.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\simpl_5291075\websocket\js\main.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\soketi_376394084\tests\utils.ts,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\searchkit_46511887\examples\with-express-javascript-cjs\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\sigma-file-manager_370679811\public\game\Build\jumpingDinosaurGame-0.0.3.loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\scratch-gui_68243930\src\lib\cloud-provider.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\snarkOS_240971104\.devnet\.analytics\analytics.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\8\shadowsocks-manager_26642716\plugins\email\index.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\8\shadowsocks-manager_26642716\plugins\freeAccount\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\shadowsocks-manager_26642716\plugins\webgui\server\home.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\8\shadowsocks-manager_26642716\services\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\ru.javascript.info_160851084\5-network\11-websocket\chat.view\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\ru.javascript.info_160851084\99-archive\067-xhr-resume\upload-resume.view\uploader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\scraperjs_22652910\src\AbstractScraper.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\ServiceWorker_8071542\publish\service_worker\FPWD-service-workers-20140501\assets\web-spec-framework\bower_components\platform\platform.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\studio_744296994\public\sqljs\sql-wasm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\rustpad_372695773\src\rustpad.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\sqlcoder_679890936\sqlcoder\static\_next\static\chunks\polyfills-c67a75d1b6f99dc8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\skeuocard_11745592\javascripts\vendor\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Springboot-Notebook_275712523\springboot101\去水印\springboot-douyin-watermark\src\main\resources\static\js\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Springboot-Notebook_275712523\springboot101\实时推送\springboot-realtime-data\src\main\resources\templates\socket.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\serviceworker-cookbook_42949529\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\stagehand_776908852\evals\deterministic\tests\BrowserContext\routing.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToBackbone\bower_components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToBackbone\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToBackbone\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToDynamicHTML\bower_components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToDynamicHTML\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\introToDynamicHTML\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\navigation\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\navigation\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\reactiveDataVis\bower_components\d3\d3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\reactiveDataVis\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\screencasts_8410317\reactiveDataVis\bower_components\marked\test\browser\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\RTCMultiConnection_21046980\dev\PubNubConnection.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RTCMultiConnection_21046980\dev\WebSocketConnection.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RTCMultiConnection_21046980\dist\RTCMultiConnection.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RTCMultiConnection_21046980\dist\RTCMultiConnection.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\snakeviz_4802028\snakeviz\static\vendor\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\search-by-image_94629944\src\utils\app.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Speed-Test_386136718\assets\js\app-2.5.4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\Speed-Test_386136718\assets\js\app-2.5.4.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\RootMyTV.github.io_348919983\stage1.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\likert\commongen.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\likert\daily_dialogue.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\likert\IMDB_sentiment_completion.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\likert\summarization.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\likert\totto.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\RL4LMs_526069335\scripts\crowdworking_templates\pairwise\commongen_pairwise.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\secure-code-game_617044081\Season-2\Level-3\code.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\spring-boot-leaning_108830079\2.x_42_courses\第 2-10 课： 使用 Spring Boot WebSocket 创建聊天室\spring-boot-websocket\src\main\resources\static\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\stream-adventure_10733929\problems\http_client\index.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\stream-adventure_10733929\problems\http_server\solution.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\stream-adventure_10733929\problems\websockets\index.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\8\stream-adventure_10733929\test\solutions\http_server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\sp-dev-fx-webparts_66962179\samples\react-multilist-grid\websocket-driver\examples\tcp_server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\sp-dev-fx-webparts_66962179\samples\react-questions-and-answers\src\tinymce\plugins\imagetools\plugin.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sp-dev-fx-webparts_66962179\samples\vue-js-org-chart\src\webparts\orgChart\plugins\orgchart.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\spring-boot-all_20640121\spring-boot-websocket-netty-server\src\main\webapp\resources\js\chat.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\seagull_25102239\static\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ScreenStream_63582643\mjpeg\src\main\assets\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\ScreenStream_63582643\mjpeg\src\main\assets\dev\script.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\supervisor_84926758\supervisor\api\panel\frontend_es5\5141.6a5e2e641ea6d5c7.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\supervisor_84926758\supervisor\api\panel\frontend_latest\5141.f792f05aa6c52cc8.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sharing_546006134\bin\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\senna.js_22793191\build\amd\metal-ajax\src\Ajax-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\senna.js_22793191\build\globals\senna-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\senna.js_22793191\examples\form\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\sql-mysteries_117861795\scripts\main.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\silicon_26010099\client_templates\websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\swagger-jsdoc_36973196\examples\app\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\rtail_25791650\cli\rtail-server.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\8\simple-react-full-stack_129705772\src\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\scripted_6160121\client\scripts\lib\sockjs-592774a-0.3.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\scripted_6160121\client\scripts\scripted\editor\scriptedEditor.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\scripted_6160121\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\scripted_6160121\tests\server\test-resources\511\goats\client\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\scripted_6160121\tests\server\test-resources\511\goats-with-requirejs\client\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\soul_546207454\src\websocket.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\8\superpower-chatgpt_628103570\scripts\thirdParty\FileSaver.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\SpotifyAPI-NET_16323991\SpotifyAPI.Web.Examples\Example.TokenSwap\Server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\susi_tweetbot_74763481\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\susi_fbbot_68761977\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\sculptgl_11232735\src\Scene.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sculptgl_11232735\src\files\ExportSketchfab.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sculptgl_11232735\src\render\shaders\ShaderPBR.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\shariff_26486322\src\js\dom.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\StarAdmin-Free-Bootstrap-Admin-Template_95215687\src\assets\vendors\iconfonts\ionicons\dist\ionicons\ionicons.cjjrsp1t.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\rss-parser_46092465\test\parser.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\ShadowFox_112297564\website\dist\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\ShadowFox_112297564\website\dist\website.615865dd.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\ShadowFox_112297564\website\dist\website.9ad09f98.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\spider_collection_238175329\zhihuAnswerSpider\node_modules\jsdom\lib\jsdom\living\websockets\WebSocket-impl.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\8\spider_collection_238175329\zhihuAnswerSpider\node_modules\jsdom\lib\jsdom\living\xhr\xhr-utils.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\8\spider_collection_238175329\zhihu_user_info_spider\node_modules\jsdom\lib\jsdom\living\websockets\WebSocket-impl.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\8\spider_collection_238175329\zhihu_user_info_spider\node_modules\jsdom\lib\jsdom\living\xhr\xhr-utils.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\8\sveltestrap_85488373\docs\v4\7.2200b7b8ae9433d2f923.manager.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sveltestrap_85488373\v4\7.2200b7b8ae9433d2f923.manager.bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\shopro-uniapp_271688440\shopro\poster\QS-SharePoster\image-tools.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\duplexify\test.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\handlebars-layouts\test\express.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\jasny-bootstrap\docs\assets\js\vendor\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\node-gyp\lib\install.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\8\sing-app_132895292\node_modules\node-gyp\test\simple-proxy.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\startup-demo_15127044\Developer\flat-ui\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\stacksort_8826588\js\lib\less.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\stack_3224183\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\SpringBootBucket_123775376\springboot-echarts\src\main\resources\public\static\js\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\SpringBootBucket_123775376\springboot-socketio\src\test\java\com\xncoding\jwt\socket\client\html\js\socket.io\socket.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\SpringBootBucket_123775376\springboot-websocket\src\test\java\com\xncoding\jwt\socket\client\html\index1.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\SpringBootBucket_123775376\springboot-websocket\src\test\java\com\xncoding\jwt\socket\client\html\js\sockjs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\singularity_136234780\html\payload.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\singularity_136234780\html\payloads\exposed-chrome-devtools.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\singularity_136234780\html\payloads\webpdb.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\static-code-scan_11649862\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\static-code-scan_11649862\static\test-server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\8\static-code-scan_11649862\static\js\dojo-1.7.0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\static-code-scan_11649862\static\js\dojo-1.8.0.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\spring-cloud-study_66635937\2019-Greenwich\spring-cloud-gateway-websocket\gateway\src\main\resources\static\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\servor_74576329\utils\common.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\8\stacey_277662\public\docs\js\jquery-1.3.2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\snoowrap_49855933\src\objects\LiveThread.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\facebook\mobile_files\3ZZmKyhKzV5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\paypal\login.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\3723580519-idpiframe.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\pjs-22-c150d8ee52dea5f25e55.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\pjs-231-02ef0f57734d26cb9029.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\login_files\pjs-22-c150d8ee52dea5f25e55.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\login_files\pjs-231-02ef0f57734d26cb9029.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\pinterest\login_files\iframe_data\3723580519-idpiframe.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\ShellPhish_276585186\sites\yahoo\login.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\8\strong-pm_20460946\lib\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\8\strong-pm_20460946\test\deploy.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\bower_components\jquery\src\ajax\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\bower_components\webcomponentsjs\HTMLImports.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\bower_components\webcomponentsjs\webcomponents-lite.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\bower_components\webcomponentsjs\webcomponents.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\polymer\bower_components\webcomponentsjs\webcomponents-lite.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\director\test\server\helpers\macros.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\director\test\server\http\http-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\JSONStream\test\destroy_missing.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\JSONStream\test\multiple_objects.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\JSONStream\test\multiple_objects_error.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\node-static\test\integration\node-static-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\todomvc_1844251\examples\typescript-react\node_modules\stream-http\test\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\the-swift-programming-language-in-chinese_20429943\add_issue.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\typescript-book_32623292\code\compiler\node_modules\ntypescript\typings\node\node.d.ts,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\typescript-book_32623292\code\compiler\typings\node\node.d.ts,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\vue2-manage_89571184\manage\static\js\app.e0a31587e6a57da7a5c1.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\UglifyJS_5569059\test\jetstream.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\9\theatre_15393566\compat-tests\utils\testUtils.ts,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\vega_7994556\docs\assets\fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vega_7994556\docs\releases\v1\vega.min.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\vega_7994556\docs\releases\v1.5.0\vega.min.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\vega_7994556\docs\releases\v1.5.4\vega.min.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\vue-hackernews-2.0_65052980\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue2-happyfri_75890962\happyfri\static\js\app.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\ungit_10154151\public\main.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\vue-resource_16630332\dist\vue-resource.common.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-resource_16630332\dist\vue-resource.esm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-resource_16630332\dist\vue-resource.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-resource_16630332\dist\vue-resource.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-resource_16630332\src\http\client\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vditor_224841533\src\ts\preview\index.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vditor_224841533\src\ts\upload\index.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vditor_224841533\src\ts\util\fixBrowserBehavior.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\uWebSockets.js_142631191\tests\smoke.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\uBlock_21108956\src\js\stats.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\traceur-compiler_9060347\demo\expressServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vscode-debug-visualizer_192892917\extension\src\webview\WebviewServer.ts,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\9\vue-i18n_19382828\examples\ssr\hn2\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\togetherjs_7009393\site\examples\youtube\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\togetherjs_7009393\togetherjs\channels.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\togetherjs_7009393\togetherjs\togetherjs.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\benchmarks\post-benchmark.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\undici_133092972\docs\examples\proxy\websocket.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\websocket.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\fetch\api\headers\header-values-normalize.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\fetch\api\headers\header-values.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\resources\channel.sub.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\service-workers\service-worker\resources\load_worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\service-workers\service-worker\resources\websocket-worker.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\basic-auth.any.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\Create-on-worker-shutdown.any.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\referrer.any.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\remove-own-iframe-during-onerror.window.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\send-many-64K-messages-with-backpressure.any.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\cookies\support\websocket-cookies-helper.sub.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\interfaces\WebSocket\close\close-connecting-async.any.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\opening-handshake\003-sets-origin.worker.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\websockets\resources\websockets-test-helpers.sub.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\access-control-and-redirects-async.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\access-control-preflight-request-allow-headers-returns-star.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\access-control-preflight-request-header-returns-origin.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\blob-range.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\content-type-unmodified.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\responsetype.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\fixtures\wpt\xhr\xhr-authorization-redirect.any.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\client-received-masked-frame.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\close-invalid-status-code.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\close-invalid-utf-8.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\close.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\continuation-frames.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\custom-headers.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\diagnostics-channel.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\events.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\fragments.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\issue-2679.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\issue-2844.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\issue-2859.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\issue-3202.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\issue-3697-2399493917.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\opening-handshake.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\ping-pong.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\receive.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\send-mutable.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\send.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\undici_133092972\test\websocket\websocketinit.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\udemy-downloader-gui_108510101\assets\js\app.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\9\tts-vue_518004533\electron\utils\api.ts,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\tts-vue_518004533\electron\utils\edge-api.ts,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\trust_98217892\js\lib\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\Voyager_645471238\voyager\env\mineflayer\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vuesax_119609583\dist\vuesax.umd.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vscode-rainbow-fart_267863774\src\service.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\tale_83033778\src\main\resources\static\admin\plugins\axios\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tale_83033778\src\main\resources\static\admin\plugins\dropzone\4.3.0\min\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\Traduzir-paginas-web_240752786\src\background\translationService.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\Traduzir-paginas-web_240752786\src\popup\popup-translate-document.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-select_52935543\docs\.vuepress\github\clientDynamicModules.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\vike_333723456\test\cjs\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue-cropper_92027632\dist\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-cropper_92027632\next\dist\vue-cropper.es.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-cropper_92027632\next\dist\vue-cropper.umd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-cropper_92027632\next\lib\exif-js-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-cropper_92027632\src\exif-js-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-framework-wz_100471864\static\bower_components\plupload\js\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-framework-wz_100471864\static\bower_components\plupload\js\plupload.full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-framework-wz_100471864\static\bower_components\qiniu\dist\qiniu.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-framework-wz_100471864\static\bower_components\qiniu\src\qiniu.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\visualization-collection_554649203\docs\6679.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\visualization-collection_554649203\docs\public\draco\gltf\draco_wasm_wrapper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\visualization-collection_554649203\public\draco\gltf\draco_wasm_wrapper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tern_8635901\plugin\node.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\9\tty.js_3346928\lib\tty.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\Tai_429850227\WebExtensions\Chrome\service-worker.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\ui-element-samples_53052105\service-worker\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\Trumbowyg_6010789\plugins\upload\trumbowyg.upload.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tribeca_38707501\src\service\main.ts,Inter-Process Communication (IPC),92,JavaScript*,WebSocket Server-side based on socket.io in JavaScript,"['Step 1: Import the necessary modules (http and socket.io).', 'Step 2: Create an HTTP server to handle incoming requests.', 'Step 3: Bind socket.io to the HTTP server for WebSocket communication.', ""Step 4: Set up event listeners for 'connection','message', 'disconnect' events and start the server.""]"
D:\CAE\Splited_Repository\9\tribeca_38707501\src\service\gateways\coinbase-api.ts,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\9\tabletop_3346542\src\tabletop.min.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\unit_375391318\src\system\platform\api\network\WebSocket\index.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\uptime_3100494\app.js,Inter-Process Communication (IPC),92,JavaScript*,WebSocket Server-side based on socket.io in JavaScript,"['Step 1: Import the necessary modules (http and socket.io).', 'Step 2: Create an HTTP server to handle incoming requests.', 'Step 3: Bind socket.io to the HTTP server for WebSocket communication.', ""Step 4: Set up event listeners for 'connection','message', 'disconnect' events and start the server.""]"
D:\CAE\Splited_Repository\9\uptime_3100494\app\api\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\uptime_3100494\app\dashboard\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\uptime_3100494\fixtures\dummyTargetUdp.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\9\uptime_3100494\lib\pollers\udp\udpPoller.js,Inter-Process Communication (IPC),98,JavaScript*,UDP based on node.js dgram,"[""Step 1: Import the built - in 'dgram' module."", 'Step 2: Create a UDP socket for IPv4 or IPv6.', 'Step 3: Handle socket events such as incoming messages, binding status, and errors.', 'Step 4: Bind the socket to a local port and optionally a specific address.']"
D:\CAE\Splited_Repository\9\undertow_5103785\examples\src\main\java\io\undertow\examples\chat\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undertow_5103785\examples\src\main\java\io\undertow\examples\jsrwebsockets\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undertow_5103785\examples\src\main\java\io\undertow\examples\sse\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\undertow_5103785\examples\src\main\java\io\undertow\examples\websockets\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\undertow_5103785\examples\src\main\java\io\undertow\examples\websockets_extension\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\TweenJS_1501185\tests\tasks\findopenport.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\vimium-c_29598525\background\action_icon.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vimium-c_29598525\background\utils.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vimium-c_29598525\pages\options_ext.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vimium-c_29598525\tests\dom\word-break.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\thesecretlivesofdata_11830909\scripts\d3\d3-3.3.9.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\thesecretlivesofdata_11830909\scripts\jquery\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vonic_66696928\dist\vonic.min.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\vonic_66696928\docs\vendor.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\V2RayAggregator_543479324\utils\localserver\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\UserScripts_70306830\DownloadAllContent\DownloadAllContent.user.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\swig_2160835\docs\docs\index.html,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\testem_2034023\examples\coverage_istanbul\testem.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\9\testem_2034023\examples\template_stealjs\steal\steal.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\control.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\.github\ci-generateTranslations.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\examples\control.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\examples\remoteapi.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\thirdparty\jeeliz\jeelizFaceFilter.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\thirdparty\jeeliz\modules\jeelizFaceFilter.moduleNoDOM.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\thirdparty\lyra\webassembly_codec_wrapper.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vdo.ninja_249234386\thirdparty\tflite\tflite-simd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-express-mongo-boilerplate_61431835\server\bundle.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\urwid_535712\urwid\display\_web.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\syte_4459589\syte\static\less\less-1.3.1.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-tetris_94079558\docs\static\js\app.4a0e998ec638005a31ef.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-tetris_94079558\src\unit\music.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.esm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.esm.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.esm.part.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.esm.ssr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.part.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\dist\vue-upload-component.ssr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-upload-component_59257347\src\utils\request.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vscode-react-native_50060429\test\smoke\package\resources\HermesReactNativeSample\TestExpressServer\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\useAuth_200542038\examples\gatsby-V2\public\9e82d048-510a147398e950707384.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\SysMocap_467799658\webserv\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue-color_56842017\localServer.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vscode-database-client_250624283\src\service\ssh\forward\tunnel.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\vscode-database-client_250624283\src\service\tunnel\tunnel-ssh.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\9\telegram-react_121551478\public\libwebp\webp_wasm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\telegram-react_121551478\public\rlottie\rlottie-wasm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\telegram-react_121551478\public\rlottie\rlottie-wasm.worker.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\ufonet_10769998\core\js\spaceinvaders.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\synthea_61399845\src\main\javascript\update_covid_stats.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\Valine_99242671\docs\assets\javascripts\application.8eb9be28.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tus-js-client_33494170\lib\browser\XHRHttpStack.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-validator_15117001\docs\gitbook\gitbook.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-validator_15117001\docs\gitbook\theme.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-validator_15117001\examples\async\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vuetable-2_70338416\dist\vuetable-2-full.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vuetable-2_70338416\dist\vuetable-2.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\turbo-rails_317981738\app\assets\javascripts\turbo.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\turbo-rails_317981738\app\assets\javascripts\turbo.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\Vue2_115995771\DOME_HTML\js\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\thinkcmf_84772499\public\static\js\plupload\plupload.full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-beauty_65170293\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\trading-vue-js_176145143\src\helpers\script_ww_api.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\trading-vue-js_176145143\test\tests\DataHelper\stream.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\swip_60904803\examples\particles\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\uirecorder_64893263\chrome-extension\js\background.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\TrackRay_155206197\web\src\main\resources\static\assets\js\vendor\dropzone.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\TrackRay_155206197\web\src\main\resources\templates\msf.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\talk-to-chatgpt_576098787\chrome-extension\content.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tsrpc_104830919\src\client\ws\WebSocketProxy.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\terminus_112529625\example\mysql\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\terminus_112529625\example\oracle\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\terminus_112529625\example\postgres\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue2-management-platform_83962073\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vigil_116993819\res\assets\javascripts\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vrview_44144887\src\util.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-datepicker_469373397\docs\assets\chunks\VPAlgoliaSearchBox.l0wMk8yr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vanity_360400\lib\vanity\templates\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tasseo_4164796\lib\tasseo\public\j\d3.v2.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tower_game_125806847\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\unicons_168150137\scripts\line\download.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\unicons_168150137\scripts\monochrome\download.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\twilio-node_8281084\examples\express.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\tabris-js_19745493\test\tabris\WebSocket.test.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\tabris-js_19745493\test\tabris\XMLHttpRequest.test.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tabris-js_19745493\test\typescript\Websocket.test.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\three-gpu-pathtracer_424089724\example\libs\libultrahdr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\TremulaJS_20826807\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\verida-js_318783560\packages\account-web-vault\src\auth-client.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\tunnelmole-client_598995344\cjs\bin\postinstall.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\9\vue-demo_63043024\build\dev.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue-zhihu-daily_59345600\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\vue-zhihu-daily_59345600\server\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\toxssin_489915869\toxin.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\visualizing-git_56211118\js\vendor\d3.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-book_86786358\daily\proxy.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\9\ThePhish_410951326\app\static\assets\js\thephish.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\tracer_3599420\example\express\app.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\9\thread_804027896\public\mediapipe\tasks-text\text_wasm_internal.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\thread_804027896\public\mediapipe\tasks-text\text_wasm_nosimd_internal.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\treesaver_902611\examples\node\lib\server.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\9\taokeeper_2908405\taokeeper-monitor\src\main\webapp\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vue-advanced-cropper_193229071\src\core\image.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\9\vialer-js_87069784\src\js\bg\plugins\app.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\9\vagrant-parallels_10557109\website\docs\source\javascripts\less-1.3.0.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\yapi_59996401\client\containers\Project\Interface\InterfaceList\Edit.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yapi_59996401\common\postmanLib.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\yapi_59996401\exts\yapi-plugin-swagger-auto-sync\interfaceSyncUtils.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\yapi_59996401\exts\yapi-plugin-wiki\wikiPage\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yapi_59996401\server\controllers\open.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\yapi_59996401\server\controllers\project.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\transport\internet\browser_dialer\dialer.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\WordPress_2889328\wp-includes\js\dist\vendor\wp-polyfill-fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WordPress_2889328\wp-includes\js\mediaelement\mediaelement-and-player.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WordPress_2889328\wp-includes\js\mediaelement\mediaelement.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WordPress_2889328\wp-includes\js\plupload\moxie.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\whistle_32131850\biz\webui\lib\index.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\10\whistle_32131850\lib\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\whistle_32131850\lib\https\ca.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\10\whistle_32131850\lib\plugins\load-plugin.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\whistle_32131850\lib\plugins\proxy.js,Inter-Process Communication (IPC),100,JavaScript*,Pipe Server-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file system operations and `http` for creating the server).', 'Step 2: Create an HTTP server using `http.createServer()` to handle incoming requests.', 'Step 3: Use `pipe()` to pass the request data to a writable stream, such as a file output stream.']"
D:\CAE\Splited_Repository\10\whistle_32131850\test\index.test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\10\whistle_32131850\test\util.test.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\10\whistle_32131850\test\plugins\whistle.test\lib\uiServer.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\trickle-ice\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webpack-bundle-analyzer_71966177\src\viewer.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\10\webui-aria2_4190976\src\js\services\rpc\sockcall.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\zh.javascript.info_128014656\5-network\11-websocket\chat.view\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\WeiXinMPSDK_7560589\Samples\All\Senparc.Weixin.Sample.Shared\wwwroot\lib\signalr\dist\browser\signalr.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WeiXinMPSDK_7560589\src\Senparc.Weixin.WxOpen\小程序资料\crack\mac\Resources\app.nw\app\dist\weapp\appservice\asdebug.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\WeiXinMPSDK_7560589\src\Senparc.Weixin.WxOpen\小程序资料\crack\win\package.nw\app\dist\weapp\appservice\asdebug.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\xgplayer_133659283\packages\xgplayer\src\plugins\testspeed\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xgplayer_133659283\packages\xgplayer-dash\src\media\task.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xgplayer_133659283\packages\xgplayer-streaming-shared\src\net\xhr.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webiny-js_116817549\packages\cli-plugin-deploy-pulumi\commands\watch.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-skills_211665033\web_modules\firebase\auth\dist\index.esm.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\youtube-dl-gui_252325835\modules\BinaryUpdater.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\youtube-dl-gui_252325835\modules\FfmpegUpdater.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\youtube-dl-gui_252325835\modules\QueryManager.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\web-clipper_153322501\src\service\request\tool\basic.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zrender_9185758\test\parser-svg-cases.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\websocket-sharp_997491\Example3\Public\Js\echotest.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\zombie_1141441\src\document.js,Inter-Process Communication (IPC),91,JavaScript*,WebSocket Client-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket connection on the server.', 'Step 3: Define event handlers for connection, messages, errors, and closing the WebSocket.']"
D:\CAE\Splited_Repository\10\zombie_1141441\src\pipeline.js,Inter-Process Communication (IPC),99,JavaScript*,Pipe Client-side based on fs+http in JavaScript,"['Step 1: Import the necessary modules (`fs` for file operations and `http` for making HTTP requests).', 'Step 2: Create a readable stream from a file using `fs.createReadStream()`.', 'Step 3: Create an HTTP request using `http.request()` to send the file data.', ""Step 4: Use `pipe()` to send the file stream data to the HTTP request's writable stream.""]"
D:\CAE\Splited_Repository\10\zombie_1141441\test\websocket_test.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\zombie_1141441\test\helpers\brains.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\wave_351298555\public\themes\tallstack\js\app.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wave_351298555\public\vendor\tcg\voyager\assets\js\plugins\imagetools\plugin.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\You-need-to-know-css_112713457\libs\docsify.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\You-need-to-know-css_112713457\libs\gitalk.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webglstudio.js_40006776\editor\js\extra\litegui.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webglstudio.js_40006776\editor\js\extra\sillyclient.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webglstudio.js_40006776\plugins\scripts\mitsuba.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\webfunny-track.uni.umd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\webfunny-track.web.umd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\webfunny-track.wx.umd.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\webfunny.fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\webfunny.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\WechatSdkReleaseScript20241101153409.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\WechatSdkReleaseScript20241101153411.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\debug\webfunny-track.uni.umd.dev.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\debug\webfunny-track.web.umd.dev.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\event\lib\debug\webfunny-track.wx.umd.dev.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\logger\lib\webfunny.fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\logger\lib\webfunny.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\monitor\lib\webfunny.fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\monitor\lib\webfunny.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webfunny_monitor_139662221\servers\monitor\lib\debug\webfunny.debug.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\weaver_585235597\website\assets\js\snap.svg-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xadmin_6755841\xadmin\static\xadmin\vendor\jquery\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-fundamentals_3253898\build\jsdoc-template\template\static\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-fundamentals_3253898\webgl\resources\tdl\io.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-fundamentals_3253898\webgl\resources\tdl\sync.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\wechat-format_174669446\src\assets\scripts\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WTM_134707912\demo\WalkingTec.Mvvm.BlazorDemo\WalkingTec.Mvvm.BlazorDemo.Shared\wwwroot\js\common.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\winjs_18102026\tests\TestLib\liveToQ\liveToQ.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\winjs_18102026\tests\TestLib\liveToQ\testsDashboard.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yui3_85670\build\get-nodejs\get-nodejs-coverage.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\yui3_85670\build\get-nodejs\get-nodejs-debug.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\yui3_85670\build\get-nodejs\get-nodejs.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\yui3_85670\build\io-base\io-base-coverage.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\yui3_85670\build\io-base\io-base-min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\yui3_85670\src\app\tests\manual\controller.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\yui3_85670\src\app\tests\manual\todos-rest\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\yui3_85670\src\get\js\get-nodejs.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\yui3_85670\src\loader\tests\server\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\zotfile_3074850\chrome\content\zotfile\pdfextract\pdfjs\src\core\network.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zotero-style_568797613\addon\chrome\content\dist\assets\index.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\platform.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\platform.native.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\platform.sandbox.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\polymer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\polymer.native.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\polymer.sandbox.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl-globe_1637930\polymer-globe\polymer\polymer-all\web-animations-js\test\coverage\esprima\test\3rdparty\mootools-1.4.5.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WebGazer_51618803\www\data\src\webgazerExtractClient.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip-fs.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip-full.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip-no-worker-deflate.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip-no-worker-inflate.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip-no-worker.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zip.js_2207038\dist\zip.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\js\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.0.6\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.0.7\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.0.8\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.0.9\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.1.0\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.1\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.2\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.3\src\lib\socket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\socket.esm.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\_hyperscript_w9y.esm.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\socket.esm.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\_hyperscript_w9y.esm.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.8.4-beta.0\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.1\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.1\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.1\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.1\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.2\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.2\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.2\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.2\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.4\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.4\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.4\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.4\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.5\dist\socket.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.5\dist\socket.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.5\dist\_hyperscript_w9y.min.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\_hyperscript_267440221\www\test\0.9.5\dist\_hyperscript_w9y.modern.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\wrangler-legacy_175043545\npm\binary-install.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\wa-automate-nodejs_202445312\demo\simple_server.ts,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\wa-automate-nodejs_202445312\src\api\Client.ts,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\weui.js_73691059\uploader-server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\xdomain_9311021\dist\xdomain.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xdomain_9311021\dist\xdomain.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xdomain_9311021\example\browserify\bundle.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xdomain_9311021\example\dropbox\index.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wedding_107868311\assets\js\dependencies\sails.io.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\web-ext_50859563\src\extension-runners\chromium.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\xhprof_165894\xhprof_html\jquery\jquery-1.2.6.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-maker_57886296\src\lib\transpilers\less.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wordpress-theme-puock_279739423\assets\libs\dplayer\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webcamjs_17383170\webcam.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webcamjs_17383170\webcam.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-tracing_441348810\packages\core\__test__\http.spec.ts,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-app-theme_109624\spec\dummy\public\javascripts\jquery-1.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webpackmonitor_103567934\plugin\npm-module\utils\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\yaaw_4182156\js\aria2.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webpack-hot-middleware_34994276\example\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\Ward_258748710\src\main\resources\static\js\setup.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WhisperLive_636344889\Audio-Transcription-Chrome\options.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\WhisperLive_636344889\Audio-Transcription-Firefox\content.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yslow_3267913\src\common\util.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\yslow_3267913\src\nodeserver\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\zazu_54614463\docs\js\vendor\fetch.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-dev-projects_497972824\food-ordering-app\server\index.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\zoid_59850602\test\lib\angular-12\angular-12-platform-browser-dynamic.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WebWhatsapp-Wrapper_58208534\webwhatsapi\js\wapi.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\yuindex_514613203\server\src\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\wppconnect_332585863\src\controllers\websocket.ts,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\wildduck_84003203\webhooks.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\wildduck_84003203\imap-core\lib\imap-server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\10\wildduck_84003203\lib\pop3\server.js,Inter-Process Communication (IPC),97,JavaScript*,TCP Server - side based on node.js net,"[""Step 1: Import the built - in 'net' module."", 'Step 2: Create a TCP server instance.', 'Step 3: Handle server lifecycle events and client connections.', 'Step 4: Start listening on a specific port.']"
D:\CAE\Splited_Repository\10\wildduck_84003203\test\filtering-test.js,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\wad_15011587\build\wad.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wad_15011587\src\common.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webp2jpg-online_233356362\cdn\wasm-im.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webim_19071965\resources\static\js\chat.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webgl2-fundamentals_65725493\build\jsdoc-template\template\static\scripts\prettify\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl2-fundamentals_65725493\webgl\resources\tdl\io.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webgl2-fundamentals_65725493\webgl\resources\tdl\sync.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\weui_54614424\weui\demo\dp\DPlayer.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\weui_54614424\weui\js\axios.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\weui_54614424\weui\js\lrz.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\YCWebView_99198811\app\src\main\assets\callsms_files\nr-998.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\YCWebView_99198811\app\src\main\assets\editer\editor\wangEditor.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wtf_311804365\http\assets\scripts\reconnecting-websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\xiaochengxu_demos_74629734\014云开发实现小程序支付\cloud\pay\node_modules\agent-base\test\test.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\10\xiaochengxu_demos_74629734\014云开发实现小程序支付\cloud\pay\node_modules\socks-proxy-agent\node_modules\agent-base\test\test.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\10\you-dont-know-node_43770860\code\server-stream.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\Workflow_221122124\dist\js\chunk-25ca418e.27906047.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\Zoom-Clone-With-WebRTC_276721326\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\YUKI_142244374\src\main\translate\Api.ts,Inter-Process Communication (IPC),95,JavaScript*,HTTP Client - side based on request in javascript,"['Step 1: Import the request module', 'Step 2: Call request method such as request.get/post/etc', 'Step 3: Configure HTTP options like URL, headers, and data', 'Step 4: Handle the HTTP response via callback']"
D:\CAE\Splited_Repository\10\webshim_901798\js-webshim\dev\shims\moxie\js\moxie-html4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\js-webshim\dev\shims\moxie\js\moxie-swf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\js-webshim\minified\shims\moxie\js\moxie-html4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\js-webshim\minified\shims\moxie\js\moxie-swf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\src\shims\moxie\js\moxie-html4.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\src\shims\moxie\js\moxie-swf.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\webshim_901798\tests\test-ext\jquery-2-custom.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-scraper-chrome-extension_14648689\extension\assets\d3.v3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-scraper-chrome-extension_14648689\extension\assets\pouchdb-nightly.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\writehat_317320893\writehat\static\js\thirdparty\cropper.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\wemark_76116964\mpvue\build\dev-server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-editor_84531631\samples\index.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\web-editor_84531631\weditor\static\js\index.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\webmc_270403199\lib\proxy.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\webmc_270403199\lib\server.js,Inter-Process Communication (IPC),94,JavaScript*,HTTP Client-side based on Axios,"['Step 1: Import the axios library to enable HTTP client functionality', 'Step 2: Choose and initiate the HTTP method for the request (GET, POST, etc.)', 'Step 3: Configure the request with URL, headers, query parameters, and payload', 'Step 4: Handle errors using catch block or error callback']"
D:\CAE\Splited_Repository\10\web-server-chrome_16991869\test\test_websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\wbwwb_71504423\js\lib\howler.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-see_569315242\test\server.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\yi-hack-v3_86138605\src\home\yi-hack-v3\www\about.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yi-hack-v3_86138605\src\home\yi-hack-v3\www\download_proxy_list.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yi-hack-v3_86138605\src\home\yi-hack-v3\www\reboot.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yi-hack-v3_86138605\src\home\yi-hack-v3\www\test_proxy_config.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\yi-hack-v3_86138605\src\home\yi-hack-v3\www\test_proxy_list.html,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\xeogl_28131018\examples\importing_gltf_parsing.html,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xeogl_28131018\examples\js\geometry\k3d.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xeogl_28131018\examples\js\models\glTFModel.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xeogl_28131018\examples\js\models\STLModel.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zangodb_74054116\docs\scripts\jquery.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\whatsapp-monitor_190583320\Desktop App\Source Code\assets\websockets.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\zhaopp_296826266\naotu\static\scripts\libs\jsmind\jsmind.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\xviz_140614041\modules\server\src\server\xviz-server.js,Inter-Process Communication (IPC),90,JavaScript*,WebSocket Server-side based on Node.js,"[""Step 1: Require the WebSocket library ('ws')."", 'Step 2: Create a new WebSocket server instance.', 'Step 3: Define event handlers for connection, messages, errors, and closing the server.']"
D:\CAE\Splited_Repository\10\xviz_140614041\test\modules\cli\websocket.spec.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
D:\CAE\Splited_Repository\10\WebGL2Samples_46760026\samples\utility.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\WebGL2Samples_46760026\samples\third-party\gltf-loader.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch03\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch04\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch05\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch06\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch07\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch08\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch08-jquery-file-upload\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch09\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch10\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch10\route-example.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch11\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch11\playground.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch12\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch13\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch14\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch15\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch16\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch17\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch18\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-development-with-node-and-express_18394992\ch19\meadowlark.js,Inter-Process Communication (IPC),96,JavaScript*,HTTP based on express in javascript,"['Step 1: Import the Express framework module.', 'Step 2: Create an Express application instance.', 'Step 3: Configure middleware for request processing.', 'Step 4: Define route handlers for HTTP methods.', 'Step 5: Start the server and listen on a specified port.']"
D:\CAE\Splited_Repository\10\web-vmstats_14728236\web\js\jquery-2.0.3.min.js,Inter-Process Communication (IPC),93,JavaScript*,HTTP Server - side based on XMLHttpRequest in JavaScript,"['Step 1: Create a new XMLHttpRequest object to initiate the request.', 'Step 2: Configure the request with the `open()` method, defining the request type (GET, POST) and the URL.', 'Step 4: Optionally, set the request headers using `setRequestHeader()` for specific content types.', 'Step 3: Set up response callback to handle asynchronous events', 'Step 5: Send the request to the server using the `send()` method.']"
D:\CAE\Splited_Repository\10\web-vmstats_14728236\web\js\reconnecting-websocket.js,Inter-Process Communication (IPC),89,JavaScript*,WebSocket Client-side based on browser native API in JavaScript,"['Step 1: Initialize a new WebSocket connection.', 'Step 2: Define event handlers for connection, messages, errors, and before window unload.', 'Step 3: Send messages, log errors, handle connection errors, and close the WebSocket connection.']"
