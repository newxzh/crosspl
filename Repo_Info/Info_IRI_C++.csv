File_path,Classfier,Classfier_ID,Interface_class,Interface_name,Status_description
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day02\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day02\server.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day03\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day03\server.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day04\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day05\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day06\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day07\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\30dayMakeCppServer_433303514\code\day08\client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\1\aio-switch-updater_296964325\source\download.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\chat\chat_client.cpp,Inter-Process Communication (IPC),151,C++*,TCP Client based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to enable asynchronous I/O operations for TCP client.', 'Step 2: Create an `io_context` object that provides I/O services for handling asynchronous operations.', 'Step 3: Create a `tcp::socket` object to establish a connection to the server.', ""Step 4: Create a `tcp::resolver` object to resolve the server's hostname and port to an endpoint."", 'Step 5: Use the `resolver.resolve()` function to get a list of endpoints and `connect()` the socket to the server.', 'Step 6: Write data to the server using `write()` and read data using `read_some()` to handle incoming messages.', 'Step 7: Use `shutdown()` and `close()` methods to cleanly terminate the connection and release resources.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\chat\posix_chat_client.cpp,Inter-Process Communication (IPC),151,C++*,TCP Client based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to enable asynchronous I/O operations for TCP client.', 'Step 2: Create an `io_context` object that provides I/O services for handling asynchronous operations.', 'Step 3: Create a `tcp::socket` object to establish a connection to the server.', ""Step 4: Create a `tcp::resolver` object to resolve the server's hostname and port to an endpoint."", 'Step 5: Use the `resolver.resolve()` function to get a list of endpoints and `connect()` the socket to the server.', 'Step 6: Write data to the server using `write()` and read data using `read_some()` to handle incoming messages.', 'Step 7: Use `shutdown()` and `close()` methods to cleanly terminate the connection and release resources.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\echo\async_udp_echo_server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\echo\blocking_udp_echo_client.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\echo\blocking_udp_echo_server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\icmp\ping.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\multicast\receiver.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\multicast\sender.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\porthopper\server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\socks4\sync_client.cpp,Inter-Process Communication (IPC),151,C++*,TCP Client based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to enable asynchronous I/O operations for TCP client.', 'Step 2: Create an `io_context` object that provides I/O services for handling asynchronous operations.', 'Step 3: Create a `tcp::socket` object to establish a connection to the server.', ""Step 4: Create a `tcp::resolver` object to resolve the server's hostname and port to an endpoint."", 'Step 5: Use the `resolver.resolve()` function to get a list of endpoints and `connect()` the socket to the server.', 'Step 6: Write data to the server using `write()` and read data using `read_some()` to handle incoming messages.', 'Step 7: Use `shutdown()` and `close()` methods to cleanly terminate the connection and release resources.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\tutorial\daytime4\client.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\tutorial\daytime5\server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\tutorial\daytime6\server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\tutorial\daytime7\server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\1\asio_7589945\example\cpp11\windows\transmit_file.cpp,Inter-Process Communication (IPC),150,C++*,TCP Server based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to use asynchronous I/O for TCP server.', 'Step 2: Create an `io_context` object which provides the core I/O functionality.', 'Step 3: Create a `tcp::acceptor` object to accept incoming TCP connections on a specified endpoint.', 'Step 4: Create a `tcp::socket` object to handle communication with the client after a connection is accepted.', 'Step 5: Use `acceptor.accept()` to accept an incoming connection from the client.', 'Step 6: Write data to the socket using `write()` and read data using `read_some()` to process client messages.', 'Step 7: Shutdown the connection and close the socket once communication is complete.']"
E:\CAE\Splited_Repository\2\citra_767152575\src\core\hle\service\soc\soc_u.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\2\citra_767152575\src\core\rpc\udp_server.cpp,Inter-Process Communication (IPC),153,C++*,UDP based on Boost.Asio in C++,"['Step 1: Include the necessary Boost.Asio header for working with UDP sockets.', 'Step 2: Create an `io_context` object to manage asynchronous operations for Boost.Asio.', 'Step 3: Create a `boost::asio::ip::udp::socket` object to represent the UDP server socket.', 'Step 4: Use the `receive_from` method to asynchronously receive UDP datagrams from clients or use the `send_to` method to send a response back to the client after processing the data.']"
E:\CAE\Splited_Repository\2\citra_767152575\src\network\artic_base\artic_base_client.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\2\CppCon2014_23930335\Presentations\How to call C libraries from C++\Code\main.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\2\CS_Offer_54698436\Coding\Linux_OS_Pipe.cpp,Inter-Process Communication (IPC),155,C++*,pipe based on unistd.h in C++,"['Step 1: Include the necessary header file for working with pipes in C++. This enables pipe functionality.', 'Step 2: Create a pipe using the `pipe` system call, which returns two file descriptors: one for reading and one for writing.', 'Step 3: Use `fork` to create a child process. The child process can now use the pipe for communication.', 'Step 4: Close the pipe file descriptors in the appropriate process (either parent or child) to prevent resource leakage.', 'Step 5: Read data from the pipe in the appropriate process.', 'Step 6: Write data to the pipe in the appropriate process.']"
E:\CAE\Splited_Repository\2\CS_Offer_54698436\Coding\Linux_OS_Socket_C.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\2\CS_Offer_54698436\Coding\Linux_OS_Socket_S.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\2\dijkstra-cartography_56004753\railway\read\main.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\3\GameNetworkingSockets_126225160\src\steamnetworkingsockets\clientlib\steamnetworkingsockets_lowlevel.cpp,Inter-Process Communication (IPC),152,C++*,UDP Server based on socket+inet in C++,"['Step 1: Include necessary headers for working with UDP sockets (`sys/socket.h` and `netinet/in.h`).', 'Step 2: Create a socket using `SOCK_DGRAM` type to indicate that this is a UDP socket.', 'Step 3: Bind the socket to a specific address and port using the `bind()` function.', 'Step 4: Use `recvfrom()` to receive incoming UDP packets from clients or Use `sendto()` to send data back to the client.']"
E:\CAE\Splited_Repository\5\libco_70655231\example_echocli.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\5\kurento-media-server_12623060\server\death_handler.cpp,Inter-Process Communication (IPC),155,C++*,pipe based on unistd.h in C++,"['Step 1: Include the necessary header file for working with pipes in C++. This enables pipe functionality.', 'Step 2: Create a pipe using the `pipe` system call, which returns two file descriptors: one for reading and one for writing.', 'Step 3: Use `fork` to create a child process. The child process can now use the pipe for communication.', 'Step 4: Close the pipe file descriptors in the appropriate process (either parent or child) to prevent resource leakage.', 'Step 5: Read data from the pipe in the appropriate process.', 'Step 6: Write data to the pipe in the appropriate process.']"
E:\CAE\Splited_Repository\5\kurento-media-server_12623060\test\registrar_test.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\5\LGTVCompanion_345084721\LGTV Companion Console\Console.cpp,Inter-Process Communication (IPC),151,C++*,TCP Client based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to enable asynchronous I/O operations for TCP client.', 'Step 2: Create an `io_context` object that provides I/O services for handling asynchronous operations.', 'Step 3: Create a `tcp::socket` object to establish a connection to the server.', ""Step 4: Create a `tcp::resolver` object to resolve the server's hostname and port to an endpoint."", 'Step 5: Use the `resolver.resolve()` function to get a list of endpoints and `connect()` the socket to the server.', 'Step 6: Write data to the server using `write()` and read data using `read_some()` to handle incoming messages.', 'Step 7: Use `shutdown()` and `close()` methods to cleanly terminate the connection and release resources.']"
E:\CAE\Splited_Repository\5\LGTVCompanion_345084721\LGTV Companion Service\web_os_client.cpp,Inter-Process Communication (IPC),151,C++*,TCP Client based on Boost.Asio in C++,"['Step 1: Include Boost.Asio headers to enable asynchronous I/O operations for TCP client.', 'Step 2: Create an `io_context` object that provides I/O services for handling asynchronous operations.', 'Step 3: Create a `tcp::socket` object to establish a connection to the server.', ""Step 4: Create a `tcp::resolver` object to resolve the server's hostname and port to an endpoint."", 'Step 5: Use the `resolver.resolve()` function to get a list of endpoints and `connect()` the socket to the server.', 'Step 6: Write data to the server using `write()` and read data using `read_some()` to handle incoming messages.', 'Step 7: Use `shutdown()` and `close()` methods to cleanly terminate the connection and release resources.']"
E:\CAE\Splited_Repository\6\OpenRGB_188880213\NetworkServer.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\6\OpenRGB_188880213\Controllers\NanoleafController\NanoleafController.cpp,Inter-Process Communication (IPC),147,C++*,Http based on cpp-httplib in C++,"['Step 1: Include the necessary cpp-httplib header files.', 'Step 2: Create an instance of the `httplib::Client` class to handle requests.', 'Step 3: Send a GET or POST request using the Client object to the desired URL.', 'Step 4: Access the `status` field of the response to check the HTTP status code.', 'Step 5: Access the `body` field of the response to read the content returned by the server.']"
E:\CAE\Splited_Repository\6\OpenRGB_188880213\dependencies\hueplusplus-1.1.0\src\LinHttpHandler.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\6\opencv-mobile_327885181\highgui\src\writer_http.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\6\oomd_139059389\src\oomd\Stats.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\6\oomd_139059389\src\oomd\StatsTest.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\6\nexusjs_56258013\src\global_object.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\7\phxpaxos_58727800\src\communicate\udp.cpp,Inter-Process Communication (IPC),152,C++*,UDP Server based on socket+inet in C++,"['Step 1: Include necessary headers for working with UDP sockets (`sys/socket.h` and `netinet/in.h`).', 'Step 2: Create a socket using `SOCK_DGRAM` type to indicate that this is a UDP socket.', 'Step 3: Bind the socket to a specific address and port using the `bind()` function.', 'Step 4: Use `recvfrom()` to receive incoming UDP packets from clients or Use `sendto()` to send data back to the client.']"
E:\CAE\Splited_Repository\7\phxpaxos_58727800\src\utils\socket.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\8\Skill-Tree_95624763\code\client_select.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
E:\CAE\Splited_Repository\8\simbody_12146969\Simbody\Visualizer\src\VisualizerProtocol.cpp,Inter-Process Communication (IPC),155,C++*,pipe based on unistd.h in C++,"['Step 1: Include the necessary header file for working with pipes in C++. This enables pipe functionality.', 'Step 2: Create a pipe using the `pipe` system call, which returns two file descriptors: one for reading and one for writing.', 'Step 3: Use `fork` to create a child process. The child process can now use the pipe for communication.', 'Step 4: Close the pipe file descriptors in the appropriate process (either parent or child) to prevent resource leakage.', 'Step 5: Read data from the pipe in the appropriate process.', 'Step 6: Write data to the pipe in the appropriate process.']"
E:\CAE\Splited_Repository\9\tair_5991438\src\common\httpclient.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\9\tvision_184303095\source\platform\unixclip.cpp,Inter-Process Communication (IPC),155,C++*,pipe based on unistd.h in C++,"['Step 1: Include the necessary header file for working with pipes in C++. This enables pipe functionality.', 'Step 2: Create a pipe using the `pipe` system call, which returns two file descriptors: one for reading and one for writing.', 'Step 3: Use `fork` to create a child process. The child process can now use the pipe for communication.', 'Step 4: Close the pipe file descriptors in the appropriate process (either parent or child) to prevent resource leakage.', 'Step 5: Read data from the pipe in the appropriate process.', 'Step 6: Write data to the pipe in the appropriate process.']"
E:\CAE\Splited_Repository\9\ucall_584714008\src\engine_uring.cpp,Inter-Process Communication (IPC),148,C++*,TCP Server based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP socket programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', 'Step 3: Bind the socket to a specific IP address and port using the `bind()` function.', 'Step 4: Set the socket to listen for incoming connection requests using the `listen()` function.', 'Step 5: Accept an incoming connection request from a client using the `accept()` function.', 'Step 6: Read data from the client using `read()` and send data back using `send()` function.', 'Step 7: Close the socket connection after communication is completed using the `close()` function.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\docs\simple_broadcast_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\associative_storage\associative_storage.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\broadcast_server\broadcast_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\debug_server\debug_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\echo_server\echo_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\echo_server_both\echo_server_both.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\echo_server_tls\echo_server_tls.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\enriched_storage\enriched_storage.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\external_io_service\external_io_service.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\scratch_server\scratch_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\simple_broadcast_server\simple_broadcast_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\examples\testee_server\testee_server.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\websocketpp_2345629\tutorials\utility_server\step2.cpp,Inter-Process Communication (IPC),154,C++*,Websocket Server based on WebSocket++ in C++,"['Step 1: Include the necessary WebSocket++ headers for server functionality.', ""Step 2: Initialize WebSocket++'s ASIO-based network handling."", 'Step 3: Set up a message handler to process incoming messages from clients.', 'Step 4: Start listening for incoming WebSocket connections on a specified port.', 'Step 5: Start accepting WebSocket connections from clients.', 'Step 6: Run the server event loop to manage the connections and messages.']"
E:\CAE\Splited_Repository\10\WechatExporter_305539431\WechatExporter\core\AsyncTask.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\10\WechatExporter_305539431\WechatExporter\core\Downloader.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\10\WechatExporter_305539431\WechatExporter\core\DownloadPool.cpp,Inter-Process Communication (IPC),146,C++*,Http based on libcurl in C++,"['Step 1: Include necessary libcurl headers.', 'Step 2: Initialize the libcurl session.', 'Step 3: Set the URL, request type, and other options.', 'Step 4: Perform the HTTP request and receive response.', 'Step 5: Clean up and release libcurl resources.']"
E:\CAE\Splited_Repository\10\wdt_22231878\util\ClientSocket.cpp,Inter-Process Communication (IPC),149,C++*,TCP Client based on socket+inet in C++,"['Step 1: Include necessary socket and inet headers for TCP client programming.', 'Step 2: Create a socket using `socket()` function with `SOCK_STREAM` type for TCP communication.', ""Step 3: Connect the socket to a remote server using `connect()` function with the server's IP address and port."", 'Step 4: Send data using `send()` and read data from the server using `read()` function.', 'Step 5: Close the socket connection after communication using the `close()` function.']"
